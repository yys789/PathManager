// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Frame.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Frame_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Frame_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Frame_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Frame_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Frame_2eproto;
namespace frame {
class AFramePos;
class AFramePosDefaultTypeInternal;
extern AFramePosDefaultTypeInternal _AFramePos_default_instance_;
class AScanePos;
class AScanePosDefaultTypeInternal;
extern AScanePosDefaultTypeInternal _AScanePos_default_instance_;
class Cad;
class CadDefaultTypeInternal;
extern CadDefaultTypeInternal _Cad_default_instance_;
class Frame;
class FrameDefaultTypeInternal;
extern FrameDefaultTypeInternal _Frame_default_instance_;
class Machine;
class MachineDefaultTypeInternal;
extern MachineDefaultTypeInternal _Machine_default_instance_;
class Pos;
class PosDefaultTypeInternal;
extern PosDefaultTypeInternal _Pos_default_instance_;
class SeamInfo;
class SeamInfoDefaultTypeInternal;
extern SeamInfoDefaultTypeInternal _SeamInfo_default_instance_;
class SeamModify;
class SeamModifyDefaultTypeInternal;
extern SeamModifyDefaultTypeInternal _SeamModify_default_instance_;
class SeamRelate;
class SeamRelateDefaultTypeInternal;
extern SeamRelateDefaultTypeInternal _SeamRelate_default_instance_;
class SeamWeldInfo;
class SeamWeldInfoDefaultTypeInternal;
extern SeamWeldInfoDefaultTypeInternal _SeamWeldInfo_default_instance_;
class WeldParament;
class WeldParamentDefaultTypeInternal;
extern WeldParamentDefaultTypeInternal _WeldParament_default_instance_;
}  // namespace frame
PROTOBUF_NAMESPACE_OPEN
template<> ::frame::AFramePos* Arena::CreateMaybeMessage<::frame::AFramePos>(Arena*);
template<> ::frame::AScanePos* Arena::CreateMaybeMessage<::frame::AScanePos>(Arena*);
template<> ::frame::Cad* Arena::CreateMaybeMessage<::frame::Cad>(Arena*);
template<> ::frame::Frame* Arena::CreateMaybeMessage<::frame::Frame>(Arena*);
template<> ::frame::Machine* Arena::CreateMaybeMessage<::frame::Machine>(Arena*);
template<> ::frame::Pos* Arena::CreateMaybeMessage<::frame::Pos>(Arena*);
template<> ::frame::SeamInfo* Arena::CreateMaybeMessage<::frame::SeamInfo>(Arena*);
template<> ::frame::SeamModify* Arena::CreateMaybeMessage<::frame::SeamModify>(Arena*);
template<> ::frame::SeamRelate* Arena::CreateMaybeMessage<::frame::SeamRelate>(Arena*);
template<> ::frame::SeamWeldInfo* Arena::CreateMaybeMessage<::frame::SeamWeldInfo>(Arena*);
template<> ::frame::WeldParament* Arena::CreateMaybeMessage<::frame::WeldParament>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace frame {

// ===================================================================

class Pos :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frame.Pos) */ {
 public:
  Pos();
  virtual ~Pos();

  Pos(const Pos& from);
  Pos(Pos&& from) noexcept
    : Pos() {
    *this = ::std::move(from);
  }

  inline Pos& operator=(const Pos& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pos& operator=(Pos&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pos& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pos* internal_default_instance() {
    return reinterpret_cast<const Pos*>(
               &_Pos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Pos& a, Pos& b) {
    a.Swap(&b);
  }
  inline void Swap(Pos* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pos* New() const final {
    return CreateMaybeMessage<Pos>(nullptr);
  }

  Pos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pos>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pos& from);
  void MergeFrom(const Pos& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pos* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frame.Pos";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Frame_2eproto);
    return ::descriptor_table_Frame_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kAFieldNumber = 4,
    kBFieldNumber = 5,
    kCFieldNumber = 6,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // double a = 4;
  void clear_a();
  double a() const;
  void set_a(double value);
  private:
  double _internal_a() const;
  void _internal_set_a(double value);
  public:

  // double b = 5;
  void clear_b();
  double b() const;
  void set_b(double value);
  private:
  double _internal_b() const;
  void _internal_set_b(double value);
  public:

  // double c = 6;
  void clear_c();
  double c() const;
  void set_c(double value);
  private:
  double _internal_c() const;
  void _internal_set_c(double value);
  public:

  // @@protoc_insertion_point(class_scope:frame.Pos)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  double z_;
  double a_;
  double b_;
  double c_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Frame_2eproto;
};
// -------------------------------------------------------------------

class AScanePos :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frame.AScanePos) */ {
 public:
  AScanePos();
  virtual ~AScanePos();

  AScanePos(const AScanePos& from);
  AScanePos(AScanePos&& from) noexcept
    : AScanePos() {
    *this = ::std::move(from);
  }

  inline AScanePos& operator=(const AScanePos& from) {
    CopyFrom(from);
    return *this;
  }
  inline AScanePos& operator=(AScanePos&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AScanePos& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AScanePos* internal_default_instance() {
    return reinterpret_cast<const AScanePos*>(
               &_AScanePos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AScanePos& a, AScanePos& b) {
    a.Swap(&b);
  }
  inline void Swap(AScanePos* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AScanePos* New() const final {
    return CreateMaybeMessage<AScanePos>(nullptr);
  }

  AScanePos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AScanePos>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AScanePos& from);
  void MergeFrom(const AScanePos& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AScanePos* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frame.AScanePos";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Frame_2eproto);
    return ::descriptor_table_Frame_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 1,
    kCameraFieldNumber = 2,
    kEnabledFieldNumber = 3,
    kAngle1FieldNumber = 5,
    kAngle2FieldNumber = 6,
    kAngle3FieldNumber = 7,
    kIndex1FieldNumber = 4,
  };
  // .frame.Pos pos = 1;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::frame::Pos& pos() const;
  ::frame::Pos* release_pos();
  ::frame::Pos* mutable_pos();
  void set_allocated_pos(::frame::Pos* pos);
  private:
  const ::frame::Pos& _internal_pos() const;
  ::frame::Pos* _internal_mutable_pos();
  public:

  // int32 camera = 2;
  void clear_camera();
  ::PROTOBUF_NAMESPACE_ID::int32 camera() const;
  void set_camera(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_camera() const;
  void _internal_set_camera(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 enabled = 3;
  void clear_enabled();
  ::PROTOBUF_NAMESPACE_ID::int32 enabled() const;
  void set_enabled(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_enabled() const;
  void _internal_set_enabled(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double angle1 = 5;
  void clear_angle1();
  double angle1() const;
  void set_angle1(double value);
  private:
  double _internal_angle1() const;
  void _internal_set_angle1(double value);
  public:

  // double angle2 = 6;
  void clear_angle2();
  double angle2() const;
  void set_angle2(double value);
  private:
  double _internal_angle2() const;
  void _internal_set_angle2(double value);
  public:

  // double angle3 = 7;
  void clear_angle3();
  double angle3() const;
  void set_angle3(double value);
  private:
  double _internal_angle3() const;
  void _internal_set_angle3(double value);
  public:

  // int32 index1 = 4;
  void clear_index1();
  ::PROTOBUF_NAMESPACE_ID::int32 index1() const;
  void set_index1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index1() const;
  void _internal_set_index1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frame.AScanePos)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::frame::Pos* pos_;
  ::PROTOBUF_NAMESPACE_ID::int32 camera_;
  ::PROTOBUF_NAMESPACE_ID::int32 enabled_;
  double angle1_;
  double angle2_;
  double angle3_;
  ::PROTOBUF_NAMESPACE_ID::int32 index1_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Frame_2eproto;
};
// -------------------------------------------------------------------

class AFramePos :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frame.AFramePos) */ {
 public:
  AFramePos();
  virtual ~AFramePos();

  AFramePos(const AFramePos& from);
  AFramePos(AFramePos&& from) noexcept
    : AFramePos() {
    *this = ::std::move(from);
  }

  inline AFramePos& operator=(const AFramePos& from) {
    CopyFrom(from);
    return *this;
  }
  inline AFramePos& operator=(AFramePos&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AFramePos& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AFramePos* internal_default_instance() {
    return reinterpret_cast<const AFramePos*>(
               &_AFramePos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AFramePos& a, AFramePos& b) {
    a.Swap(&b);
  }
  inline void Swap(AFramePos* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AFramePos* New() const final {
    return CreateMaybeMessage<AFramePos>(nullptr);
  }

  AFramePos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AFramePos>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AFramePos& from);
  void MergeFrom(const AFramePos& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AFramePos* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frame.AFramePos";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Frame_2eproto);
    return ::descriptor_table_Frame_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 1,
    kWeldFieldNumber = 2,
    kHeightFieldNumber = 3,
    kEnabledFieldNumber = 4,
    kIndex1FieldNumber = 5,
    kAngle1FieldNumber = 6,
    kAngle2FieldNumber = 7,
    kAngle3FieldNumber = 8,
  };
  // .frame.Pos pos = 1;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::frame::Pos& pos() const;
  ::frame::Pos* release_pos();
  ::frame::Pos* mutable_pos();
  void set_allocated_pos(::frame::Pos* pos);
  private:
  const ::frame::Pos& _internal_pos() const;
  ::frame::Pos* _internal_mutable_pos();
  public:

  // int32 weld = 2;
  void clear_weld();
  ::PROTOBUF_NAMESPACE_ID::int32 weld() const;
  void set_weld(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_weld() const;
  void _internal_set_weld(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 height = 3;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 enabled = 4;
  void clear_enabled();
  ::PROTOBUF_NAMESPACE_ID::int32 enabled() const;
  void set_enabled(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_enabled() const;
  void _internal_set_enabled(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 index1 = 5;
  void clear_index1();
  ::PROTOBUF_NAMESPACE_ID::int32 index1() const;
  void set_index1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index1() const;
  void _internal_set_index1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double angle1 = 6;
  void clear_angle1();
  double angle1() const;
  void set_angle1(double value);
  private:
  double _internal_angle1() const;
  void _internal_set_angle1(double value);
  public:

  // double angle2 = 7;
  void clear_angle2();
  double angle2() const;
  void set_angle2(double value);
  private:
  double _internal_angle2() const;
  void _internal_set_angle2(double value);
  public:

  // double angle3 = 8;
  void clear_angle3();
  double angle3() const;
  void set_angle3(double value);
  private:
  double _internal_angle3() const;
  void _internal_set_angle3(double value);
  public:

  // @@protoc_insertion_point(class_scope:frame.AFramePos)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::frame::Pos* pos_;
  ::PROTOBUF_NAMESPACE_ID::int32 weld_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::int32 enabled_;
  ::PROTOBUF_NAMESPACE_ID::int32 index1_;
  double angle1_;
  double angle2_;
  double angle3_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Frame_2eproto;
};
// -------------------------------------------------------------------

class SeamRelate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frame.SeamRelate) */ {
 public:
  SeamRelate();
  virtual ~SeamRelate();

  SeamRelate(const SeamRelate& from);
  SeamRelate(SeamRelate&& from) noexcept
    : SeamRelate() {
    *this = ::std::move(from);
  }

  inline SeamRelate& operator=(const SeamRelate& from) {
    CopyFrom(from);
    return *this;
  }
  inline SeamRelate& operator=(SeamRelate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SeamRelate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SeamRelate* internal_default_instance() {
    return reinterpret_cast<const SeamRelate*>(
               &_SeamRelate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SeamRelate& a, SeamRelate& b) {
    a.Swap(&b);
  }
  inline void Swap(SeamRelate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SeamRelate* New() const final {
    return CreateMaybeMessage<SeamRelate>(nullptr);
  }

  SeamRelate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SeamRelate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SeamRelate& from);
  void MergeFrom(const SeamRelate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SeamRelate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frame.SeamRelate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Frame_2eproto);
    return ::descriptor_table_Frame_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpacing1FieldNumber = 1,
    kDistance1FieldNumber = 2,
    kSpacing2FieldNumber = 3,
    kDistance2FieldNumber = 4,
    kBind1FieldNumber = 5,
    kBind2FieldNumber = 6,
    kSeFlagFieldNumber = 7,
  };
  // double spacing1 = 1;
  void clear_spacing1();
  double spacing1() const;
  void set_spacing1(double value);
  private:
  double _internal_spacing1() const;
  void _internal_set_spacing1(double value);
  public:

  // double distance1 = 2;
  void clear_distance1();
  double distance1() const;
  void set_distance1(double value);
  private:
  double _internal_distance1() const;
  void _internal_set_distance1(double value);
  public:

  // double spacing2 = 3;
  void clear_spacing2();
  double spacing2() const;
  void set_spacing2(double value);
  private:
  double _internal_spacing2() const;
  void _internal_set_spacing2(double value);
  public:

  // double distance2 = 4;
  void clear_distance2();
  double distance2() const;
  void set_distance2(double value);
  private:
  double _internal_distance2() const;
  void _internal_set_distance2(double value);
  public:

  // int32 bind1 = 5;
  void clear_bind1();
  ::PROTOBUF_NAMESPACE_ID::int32 bind1() const;
  void set_bind1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bind1() const;
  void _internal_set_bind1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bind2 = 6;
  void clear_bind2();
  ::PROTOBUF_NAMESPACE_ID::int32 bind2() const;
  void set_bind2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bind2() const;
  void _internal_set_bind2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 seFlag = 7;
  void clear_seflag();
  ::PROTOBUF_NAMESPACE_ID::int32 seflag() const;
  void set_seflag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_seflag() const;
  void _internal_set_seflag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frame.SeamRelate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double spacing1_;
  double distance1_;
  double spacing2_;
  double distance2_;
  ::PROTOBUF_NAMESPACE_ID::int32 bind1_;
  ::PROTOBUF_NAMESPACE_ID::int32 bind2_;
  ::PROTOBUF_NAMESPACE_ID::int32 seflag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Frame_2eproto;
};
// -------------------------------------------------------------------

class SeamWeldInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frame.SeamWeldInfo) */ {
 public:
  SeamWeldInfo();
  virtual ~SeamWeldInfo();

  SeamWeldInfo(const SeamWeldInfo& from);
  SeamWeldInfo(SeamWeldInfo&& from) noexcept
    : SeamWeldInfo() {
    *this = ::std::move(from);
  }

  inline SeamWeldInfo& operator=(const SeamWeldInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SeamWeldInfo& operator=(SeamWeldInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SeamWeldInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SeamWeldInfo* internal_default_instance() {
    return reinterpret_cast<const SeamWeldInfo*>(
               &_SeamWeldInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SeamWeldInfo& a, SeamWeldInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SeamWeldInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SeamWeldInfo* New() const final {
    return CreateMaybeMessage<SeamWeldInfo>(nullptr);
  }

  SeamWeldInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SeamWeldInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SeamWeldInfo& from);
  void MergeFrom(const SeamWeldInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SeamWeldInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frame.SeamWeldInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Frame_2eproto);
    return ::descriptor_table_Frame_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffsetFieldNumber = 2,
    kBaseoffsetFieldNumber = 3,
    kWeldorderFieldNumber = 1,
  };
  // .frame.Pos offset = 2;
  bool has_offset() const;
  private:
  bool _internal_has_offset() const;
  public:
  void clear_offset();
  const ::frame::Pos& offset() const;
  ::frame::Pos* release_offset();
  ::frame::Pos* mutable_offset();
  void set_allocated_offset(::frame::Pos* offset);
  private:
  const ::frame::Pos& _internal_offset() const;
  ::frame::Pos* _internal_mutable_offset();
  public:

  // .frame.Pos baseoffset = 3;
  bool has_baseoffset() const;
  private:
  bool _internal_has_baseoffset() const;
  public:
  void clear_baseoffset();
  const ::frame::Pos& baseoffset() const;
  ::frame::Pos* release_baseoffset();
  ::frame::Pos* mutable_baseoffset();
  void set_allocated_baseoffset(::frame::Pos* baseoffset);
  private:
  const ::frame::Pos& _internal_baseoffset() const;
  ::frame::Pos* _internal_mutable_baseoffset();
  public:

  // int32 weldorder = 1;
  void clear_weldorder();
  ::PROTOBUF_NAMESPACE_ID::int32 weldorder() const;
  void set_weldorder(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_weldorder() const;
  void _internal_set_weldorder(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frame.SeamWeldInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::frame::Pos* offset_;
  ::frame::Pos* baseoffset_;
  ::PROTOBUF_NAMESPACE_ID::int32 weldorder_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Frame_2eproto;
};
// -------------------------------------------------------------------

class WeldParament :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frame.WeldParament) */ {
 public:
  WeldParament();
  virtual ~WeldParament();

  WeldParament(const WeldParament& from);
  WeldParament(WeldParament&& from) noexcept
    : WeldParament() {
    *this = ::std::move(from);
  }

  inline WeldParament& operator=(const WeldParament& from) {
    CopyFrom(from);
    return *this;
  }
  inline WeldParament& operator=(WeldParament&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WeldParament& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WeldParament* internal_default_instance() {
    return reinterpret_cast<const WeldParament*>(
               &_WeldParament_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(WeldParament& a, WeldParament& b) {
    a.Swap(&b);
  }
  inline void Swap(WeldParament* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WeldParament* New() const final {
    return CreateMaybeMessage<WeldParament>(nullptr);
  }

  WeldParament* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WeldParament>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WeldParament& from);
  void MergeFrom(const WeldParament& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WeldParament* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frame.WeldParament";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Frame_2eproto);
    return ::descriptor_table_Frame_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSWFieldNumber = 1,
    kIWFieldNumber = 2,
    kVWFieldNumber = 3,
    kTEndFieldNumber = 4,
    kIEndFieldNumber = 5,
    kVEndFieldNumber = 6,
    kRangeFieldNumber = 7,
    kAxisXFieldNumber = 8,
    kAxisYFieldNumber = 9,
  };
  // int32 s_w = 1;
  void clear_s_w();
  ::PROTOBUF_NAMESPACE_ID::int32 s_w() const;
  void set_s_w(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_s_w() const;
  void _internal_set_s_w(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 i_w = 2;
  void clear_i_w();
  ::PROTOBUF_NAMESPACE_ID::int32 i_w() const;
  void set_i_w(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_i_w() const;
  void _internal_set_i_w(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 v_w = 3;
  void clear_v_w();
  ::PROTOBUF_NAMESPACE_ID::int32 v_w() const;
  void set_v_w(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_v_w() const;
  void _internal_set_v_w(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 t_end = 4;
  void clear_t_end();
  ::PROTOBUF_NAMESPACE_ID::int32 t_end() const;
  void set_t_end(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_t_end() const;
  void _internal_set_t_end(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 i_end = 5;
  void clear_i_end();
  ::PROTOBUF_NAMESPACE_ID::int32 i_end() const;
  void set_i_end(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_i_end() const;
  void _internal_set_i_end(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 v_end = 6;
  void clear_v_end();
  ::PROTOBUF_NAMESPACE_ID::int32 v_end() const;
  void set_v_end(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_v_end() const;
  void _internal_set_v_end(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 range = 7;
  void clear_range();
  ::PROTOBUF_NAMESPACE_ID::int32 range() const;
  void set_range(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_range() const;
  void _internal_set_range(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 axis_x = 8;
  void clear_axis_x();
  ::PROTOBUF_NAMESPACE_ID::int32 axis_x() const;
  void set_axis_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_axis_x() const;
  void _internal_set_axis_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 axis_y = 9;
  void clear_axis_y();
  ::PROTOBUF_NAMESPACE_ID::int32 axis_y() const;
  void set_axis_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_axis_y() const;
  void _internal_set_axis_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frame.WeldParament)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 s_w_;
  ::PROTOBUF_NAMESPACE_ID::int32 i_w_;
  ::PROTOBUF_NAMESPACE_ID::int32 v_w_;
  ::PROTOBUF_NAMESPACE_ID::int32 t_end_;
  ::PROTOBUF_NAMESPACE_ID::int32 i_end_;
  ::PROTOBUF_NAMESPACE_ID::int32 v_end_;
  ::PROTOBUF_NAMESPACE_ID::int32 range_;
  ::PROTOBUF_NAMESPACE_ID::int32 axis_x_;
  ::PROTOBUF_NAMESPACE_ID::int32 axis_y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Frame_2eproto;
};
// -------------------------------------------------------------------

class Cad :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frame.Cad) */ {
 public:
  Cad();
  virtual ~Cad();

  Cad(const Cad& from);
  Cad(Cad&& from) noexcept
    : Cad() {
    *this = ::std::move(from);
  }

  inline Cad& operator=(const Cad& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cad& operator=(Cad&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cad& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Cad* internal_default_instance() {
    return reinterpret_cast<const Cad*>(
               &_Cad_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Cad& a, Cad& b) {
    a.Swap(&b);
  }
  inline void Swap(Cad* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cad* New() const final {
    return CreateMaybeMessage<Cad>(nullptr);
  }

  Cad* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cad>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cad& from);
  void MergeFrom(const Cad& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cad* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frame.Cad";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Frame_2eproto);
    return ::descriptor_table_Frame_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCadidFieldNumber = 1,
    kCadBasePosFieldNumber = 3,
    kCadMidPointFieldNumber = 2,
    kSafeLocFieldNumber = 5,
    kSafeAngle1FieldNumber = 4,
  };
  // string cadid = 1;
  void clear_cadid();
  const std::string& cadid() const;
  void set_cadid(const std::string& value);
  void set_cadid(std::string&& value);
  void set_cadid(const char* value);
  void set_cadid(const char* value, size_t size);
  std::string* mutable_cadid();
  std::string* release_cadid();
  void set_allocated_cadid(std::string* cadid);
  private:
  const std::string& _internal_cadid() const;
  void _internal_set_cadid(const std::string& value);
  std::string* _internal_mutable_cadid();
  public:

  // .frame.Pos cadBasePos = 3;
  bool has_cadbasepos() const;
  private:
  bool _internal_has_cadbasepos() const;
  public:
  void clear_cadbasepos();
  const ::frame::Pos& cadbasepos() const;
  ::frame::Pos* release_cadbasepos();
  ::frame::Pos* mutable_cadbasepos();
  void set_allocated_cadbasepos(::frame::Pos* cadbasepos);
  private:
  const ::frame::Pos& _internal_cadbasepos() const;
  ::frame::Pos* _internal_mutable_cadbasepos();
  public:

  // int32 cadMidPoint = 2;
  void clear_cadmidpoint();
  ::PROTOBUF_NAMESPACE_ID::int32 cadmidpoint() const;
  void set_cadmidpoint(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cadmidpoint() const;
  void _internal_set_cadmidpoint(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 safeLoc = 5;
  void clear_safeloc();
  ::PROTOBUF_NAMESPACE_ID::int32 safeloc() const;
  void set_safeloc(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_safeloc() const;
  void _internal_set_safeloc(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double safeAngle1 = 4;
  void clear_safeangle1();
  double safeangle1() const;
  void set_safeangle1(double value);
  private:
  double _internal_safeangle1() const;
  void _internal_set_safeangle1(double value);
  public:

  // @@protoc_insertion_point(class_scope:frame.Cad)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cadid_;
  ::frame::Pos* cadbasepos_;
  ::PROTOBUF_NAMESPACE_ID::int32 cadmidpoint_;
  ::PROTOBUF_NAMESPACE_ID::int32 safeloc_;
  double safeangle1_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Frame_2eproto;
};
// -------------------------------------------------------------------

class Machine :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frame.Machine) */ {
 public:
  Machine();
  virtual ~Machine();

  Machine(const Machine& from);
  Machine(Machine&& from) noexcept
    : Machine() {
    *this = ::std::move(from);
  }

  inline Machine& operator=(const Machine& from) {
    CopyFrom(from);
    return *this;
  }
  inline Machine& operator=(Machine&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Machine& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Machine* internal_default_instance() {
    return reinterpret_cast<const Machine*>(
               &_Machine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Machine& a, Machine& b) {
    a.Swap(&b);
  }
  inline void Swap(Machine* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Machine* New() const final {
    return CreateMaybeMessage<Machine>(nullptr);
  }

  Machine* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Machine>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Machine& from);
  void MergeFrom(const Machine& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Machine* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frame.Machine";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Frame_2eproto);
    return ::descriptor_table_Frame_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosMotorStartFieldNumber = 1,
    kPosMotorStopFieldNumber = 2,
    kAngle1MotorStartFieldNumber = 3,
    kAngle1MotorStopFieldNumber = 4,
    kAngle2MotorStartFieldNumber = 5,
    kAngle2MotorStopFieldNumber = 6,
    kMotor1SpeedFieldNumber = 7,
    kMotor2SpeedFieldNumber = 8,
    kMotor3SpeedFieldNumber = 9,
  };
  // double pos_motor_start = 1;
  void clear_pos_motor_start();
  double pos_motor_start() const;
  void set_pos_motor_start(double value);
  private:
  double _internal_pos_motor_start() const;
  void _internal_set_pos_motor_start(double value);
  public:

  // double pos_motor_stop = 2;
  void clear_pos_motor_stop();
  double pos_motor_stop() const;
  void set_pos_motor_stop(double value);
  private:
  double _internal_pos_motor_stop() const;
  void _internal_set_pos_motor_stop(double value);
  public:

  // double angle1_motor_start = 3;
  void clear_angle1_motor_start();
  double angle1_motor_start() const;
  void set_angle1_motor_start(double value);
  private:
  double _internal_angle1_motor_start() const;
  void _internal_set_angle1_motor_start(double value);
  public:

  // double angle1_motor_stop = 4;
  void clear_angle1_motor_stop();
  double angle1_motor_stop() const;
  void set_angle1_motor_stop(double value);
  private:
  double _internal_angle1_motor_stop() const;
  void _internal_set_angle1_motor_stop(double value);
  public:

  // double angle2_motor_start = 5;
  void clear_angle2_motor_start();
  double angle2_motor_start() const;
  void set_angle2_motor_start(double value);
  private:
  double _internal_angle2_motor_start() const;
  void _internal_set_angle2_motor_start(double value);
  public:

  // double angle2_motor_stop = 6;
  void clear_angle2_motor_stop();
  double angle2_motor_stop() const;
  void set_angle2_motor_stop(double value);
  private:
  double _internal_angle2_motor_stop() const;
  void _internal_set_angle2_motor_stop(double value);
  public:

  // double motor1speed = 7;
  void clear_motor1speed();
  double motor1speed() const;
  void set_motor1speed(double value);
  private:
  double _internal_motor1speed() const;
  void _internal_set_motor1speed(double value);
  public:

  // double motor2speed = 8;
  void clear_motor2speed();
  double motor2speed() const;
  void set_motor2speed(double value);
  private:
  double _internal_motor2speed() const;
  void _internal_set_motor2speed(double value);
  public:

  // double motor3speed = 9;
  void clear_motor3speed();
  double motor3speed() const;
  void set_motor3speed(double value);
  private:
  double _internal_motor3speed() const;
  void _internal_set_motor3speed(double value);
  public:

  // @@protoc_insertion_point(class_scope:frame.Machine)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double pos_motor_start_;
  double pos_motor_stop_;
  double angle1_motor_start_;
  double angle1_motor_stop_;
  double angle2_motor_start_;
  double angle2_motor_stop_;
  double motor1speed_;
  double motor2speed_;
  double motor3speed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Frame_2eproto;
};
// -------------------------------------------------------------------

class SeamModify :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frame.SeamModify) */ {
 public:
  SeamModify();
  virtual ~SeamModify();

  SeamModify(const SeamModify& from);
  SeamModify(SeamModify&& from) noexcept
    : SeamModify() {
    *this = ::std::move(from);
  }

  inline SeamModify& operator=(const SeamModify& from) {
    CopyFrom(from);
    return *this;
  }
  inline SeamModify& operator=(SeamModify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SeamModify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SeamModify* internal_default_instance() {
    return reinterpret_cast<const SeamModify*>(
               &_SeamModify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SeamModify& a, SeamModify& b) {
    a.Swap(&b);
  }
  inline void Swap(SeamModify* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SeamModify* New() const final {
    return CreateMaybeMessage<SeamModify>(nullptr);
  }

  SeamModify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SeamModify>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SeamModify& from);
  void MergeFrom(const SeamModify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SeamModify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frame.SeamModify";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Frame_2eproto);
    return ::descriptor_table_Frame_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeamTypeFieldNumber = 3,
    kOption1FieldNumber = 7,
    kMainFieldNumber = 1,
    kRankFieldNumber = 2,
    kDEPARTLENFieldNumber = 4,
    kMidPointFieldNumber = 5,
    kMIDDLESTARTFieldNumber = 6,
    kAutoFitFieldNumber = 8,
    kTracingFieldNumber = 9,
    kWidthFieldNumber = 10,
    kHeightFieldNumber = 11,
    kCORNERLENFieldNumber = 12,
    kCORNERANGLEFieldNumber = 13,
    kEnabledFieldNumber = 14,
  };
  // string seamType = 3;
  void clear_seamtype();
  const std::string& seamtype() const;
  void set_seamtype(const std::string& value);
  void set_seamtype(std::string&& value);
  void set_seamtype(const char* value);
  void set_seamtype(const char* value, size_t size);
  std::string* mutable_seamtype();
  std::string* release_seamtype();
  void set_allocated_seamtype(std::string* seamtype);
  private:
  const std::string& _internal_seamtype() const;
  void _internal_set_seamtype(const std::string& value);
  std::string* _internal_mutable_seamtype();
  public:

  // string option1 = 7;
  void clear_option1();
  const std::string& option1() const;
  void set_option1(const std::string& value);
  void set_option1(std::string&& value);
  void set_option1(const char* value);
  void set_option1(const char* value, size_t size);
  std::string* mutable_option1();
  std::string* release_option1();
  void set_allocated_option1(std::string* option1);
  private:
  const std::string& _internal_option1() const;
  void _internal_set_option1(const std::string& value);
  std::string* _internal_mutable_option1();
  public:

  // int32 main = 1;
  void clear_main();
  ::PROTOBUF_NAMESPACE_ID::int32 main() const;
  void set_main(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_main() const;
  void _internal_set_main(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 rank = 2;
  void clear_rank();
  ::PROTOBUF_NAMESPACE_ID::int32 rank() const;
  void set_rank(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rank() const;
  void _internal_set_rank(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double DEPARTLEN = 4;
  void clear_departlen();
  double departlen() const;
  void set_departlen(double value);
  private:
  double _internal_departlen() const;
  void _internal_set_departlen(double value);
  public:

  // int32 midPoint = 5;
  void clear_midpoint();
  ::PROTOBUF_NAMESPACE_ID::int32 midpoint() const;
  void set_midpoint(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_midpoint() const;
  void _internal_set_midpoint(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 MIDDLESTART = 6;
  void clear_middlestart();
  ::PROTOBUF_NAMESPACE_ID::int32 middlestart() const;
  void set_middlestart(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_middlestart() const;
  void _internal_set_middlestart(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 autoFit = 8;
  void clear_autofit();
  ::PROTOBUF_NAMESPACE_ID::int32 autofit() const;
  void set_autofit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_autofit() const;
  void _internal_set_autofit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 tracing = 9;
  void clear_tracing();
  ::PROTOBUF_NAMESPACE_ID::int32 tracing() const;
  void set_tracing(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tracing() const;
  void _internal_set_tracing(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double width = 10;
  void clear_width();
  double width() const;
  void set_width(double value);
  private:
  double _internal_width() const;
  void _internal_set_width(double value);
  public:

  // double height = 11;
  void clear_height();
  double height() const;
  void set_height(double value);
  private:
  double _internal_height() const;
  void _internal_set_height(double value);
  public:

  // int32 CORNERLEN = 12;
  void clear_cornerlen();
  ::PROTOBUF_NAMESPACE_ID::int32 cornerlen() const;
  void set_cornerlen(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cornerlen() const;
  void _internal_set_cornerlen(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 CORNERANGLE = 13;
  void clear_cornerangle();
  ::PROTOBUF_NAMESPACE_ID::int32 cornerangle() const;
  void set_cornerangle(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cornerangle() const;
  void _internal_set_cornerangle(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 enabled = 14;
  void clear_enabled();
  ::PROTOBUF_NAMESPACE_ID::int32 enabled() const;
  void set_enabled(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_enabled() const;
  void _internal_set_enabled(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frame.SeamModify)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr seamtype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr option1_;
  ::PROTOBUF_NAMESPACE_ID::int32 main_;
  ::PROTOBUF_NAMESPACE_ID::int32 rank_;
  double departlen_;
  ::PROTOBUF_NAMESPACE_ID::int32 midpoint_;
  ::PROTOBUF_NAMESPACE_ID::int32 middlestart_;
  ::PROTOBUF_NAMESPACE_ID::int32 autofit_;
  ::PROTOBUF_NAMESPACE_ID::int32 tracing_;
  double width_;
  double height_;
  ::PROTOBUF_NAMESPACE_ID::int32 cornerlen_;
  ::PROTOBUF_NAMESPACE_ID::int32 cornerangle_;
  ::PROTOBUF_NAMESPACE_ID::int32 enabled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Frame_2eproto;
};
// -------------------------------------------------------------------

class SeamInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frame.SeamInfo) */ {
 public:
  SeamInfo();
  virtual ~SeamInfo();

  SeamInfo(const SeamInfo& from);
  SeamInfo(SeamInfo&& from) noexcept
    : SeamInfo() {
    *this = ::std::move(from);
  }

  inline SeamInfo& operator=(const SeamInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SeamInfo& operator=(SeamInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SeamInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SeamInfo* internal_default_instance() {
    return reinterpret_cast<const SeamInfo*>(
               &_SeamInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SeamInfo& a, SeamInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SeamInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SeamInfo* New() const final {
    return CreateMaybeMessage<SeamInfo>(nullptr);
  }

  SeamInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SeamInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SeamInfo& from);
  void MergeFrom(const SeamInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SeamInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frame.SeamInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Frame_2eproto);
    return ::descriptor_table_Frame_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFramePosFieldNumber = 1,
    kScanePosFieldNumber = 2,
    kSeamNameFieldNumber = 6,
    kCadidFieldNumber = 10,
    kRelateFieldNumber = 3,
    kWeldinfoFieldNumber = 4,
    kWeldParaFieldNumber = 5,
    kMachineFieldNumber = 11,
    kModifyFieldNumber = 12,
    kSeamIDFieldNumber = 7,
    kOrderIndexFieldNumber = 8,
    kSeamIndexFieldNumber = 9,
  };
  // repeated .frame.AFramePos framePos = 1;
  int framepos_size() const;
  private:
  int _internal_framepos_size() const;
  public:
  void clear_framepos();
  ::frame::AFramePos* mutable_framepos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::AFramePos >*
      mutable_framepos();
  private:
  const ::frame::AFramePos& _internal_framepos(int index) const;
  ::frame::AFramePos* _internal_add_framepos();
  public:
  const ::frame::AFramePos& framepos(int index) const;
  ::frame::AFramePos* add_framepos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::AFramePos >&
      framepos() const;

  // repeated .frame.AScanePos scanePos = 2;
  int scanepos_size() const;
  private:
  int _internal_scanepos_size() const;
  public:
  void clear_scanepos();
  ::frame::AScanePos* mutable_scanepos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::AScanePos >*
      mutable_scanepos();
  private:
  const ::frame::AScanePos& _internal_scanepos(int index) const;
  ::frame::AScanePos* _internal_add_scanepos();
  public:
  const ::frame::AScanePos& scanepos(int index) const;
  ::frame::AScanePos* add_scanepos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::AScanePos >&
      scanepos() const;

  // string seamName = 6;
  void clear_seamname();
  const std::string& seamname() const;
  void set_seamname(const std::string& value);
  void set_seamname(std::string&& value);
  void set_seamname(const char* value);
  void set_seamname(const char* value, size_t size);
  std::string* mutable_seamname();
  std::string* release_seamname();
  void set_allocated_seamname(std::string* seamname);
  private:
  const std::string& _internal_seamname() const;
  void _internal_set_seamname(const std::string& value);
  std::string* _internal_mutable_seamname();
  public:

  // string cadid = 10;
  void clear_cadid();
  const std::string& cadid() const;
  void set_cadid(const std::string& value);
  void set_cadid(std::string&& value);
  void set_cadid(const char* value);
  void set_cadid(const char* value, size_t size);
  std::string* mutable_cadid();
  std::string* release_cadid();
  void set_allocated_cadid(std::string* cadid);
  private:
  const std::string& _internal_cadid() const;
  void _internal_set_cadid(const std::string& value);
  std::string* _internal_mutable_cadid();
  public:

  // .frame.SeamRelate relate = 3;
  bool has_relate() const;
  private:
  bool _internal_has_relate() const;
  public:
  void clear_relate();
  const ::frame::SeamRelate& relate() const;
  ::frame::SeamRelate* release_relate();
  ::frame::SeamRelate* mutable_relate();
  void set_allocated_relate(::frame::SeamRelate* relate);
  private:
  const ::frame::SeamRelate& _internal_relate() const;
  ::frame::SeamRelate* _internal_mutable_relate();
  public:

  // .frame.SeamWeldInfo weldinfo = 4;
  bool has_weldinfo() const;
  private:
  bool _internal_has_weldinfo() const;
  public:
  void clear_weldinfo();
  const ::frame::SeamWeldInfo& weldinfo() const;
  ::frame::SeamWeldInfo* release_weldinfo();
  ::frame::SeamWeldInfo* mutable_weldinfo();
  void set_allocated_weldinfo(::frame::SeamWeldInfo* weldinfo);
  private:
  const ::frame::SeamWeldInfo& _internal_weldinfo() const;
  ::frame::SeamWeldInfo* _internal_mutable_weldinfo();
  public:

  // .frame.WeldParament weldPara = 5;
  bool has_weldpara() const;
  private:
  bool _internal_has_weldpara() const;
  public:
  void clear_weldpara();
  const ::frame::WeldParament& weldpara() const;
  ::frame::WeldParament* release_weldpara();
  ::frame::WeldParament* mutable_weldpara();
  void set_allocated_weldpara(::frame::WeldParament* weldpara);
  private:
  const ::frame::WeldParament& _internal_weldpara() const;
  ::frame::WeldParament* _internal_mutable_weldpara();
  public:

  // .frame.Machine machine = 11;
  bool has_machine() const;
  private:
  bool _internal_has_machine() const;
  public:
  void clear_machine();
  const ::frame::Machine& machine() const;
  ::frame::Machine* release_machine();
  ::frame::Machine* mutable_machine();
  void set_allocated_machine(::frame::Machine* machine);
  private:
  const ::frame::Machine& _internal_machine() const;
  ::frame::Machine* _internal_mutable_machine();
  public:

  // .frame.SeamModify modify = 12;
  bool has_modify() const;
  private:
  bool _internal_has_modify() const;
  public:
  void clear_modify();
  const ::frame::SeamModify& modify() const;
  ::frame::SeamModify* release_modify();
  ::frame::SeamModify* mutable_modify();
  void set_allocated_modify(::frame::SeamModify* modify);
  private:
  const ::frame::SeamModify& _internal_modify() const;
  ::frame::SeamModify* _internal_mutable_modify();
  public:

  // int32 seamID = 7;
  void clear_seamid();
  ::PROTOBUF_NAMESPACE_ID::int32 seamid() const;
  void set_seamid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_seamid() const;
  void _internal_set_seamid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 orderIndex = 8;
  void clear_orderindex();
  ::PROTOBUF_NAMESPACE_ID::int32 orderindex() const;
  void set_orderindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_orderindex() const;
  void _internal_set_orderindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 seamIndex = 9;
  void clear_seamindex();
  ::PROTOBUF_NAMESPACE_ID::int32 seamindex() const;
  void set_seamindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_seamindex() const;
  void _internal_set_seamindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:frame.SeamInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::AFramePos > framepos_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::AScanePos > scanepos_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr seamname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cadid_;
  ::frame::SeamRelate* relate_;
  ::frame::SeamWeldInfo* weldinfo_;
  ::frame::WeldParament* weldpara_;
  ::frame::Machine* machine_;
  ::frame::SeamModify* modify_;
  ::PROTOBUF_NAMESPACE_ID::int32 seamid_;
  ::PROTOBUF_NAMESPACE_ID::int32 orderindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 seamindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Frame_2eproto;
};
// -------------------------------------------------------------------

class Frame :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frame.Frame) */ {
 public:
  Frame();
  virtual ~Frame();

  Frame(const Frame& from);
  Frame(Frame&& from) noexcept
    : Frame() {
    *this = ::std::move(from);
  }

  inline Frame& operator=(const Frame& from) {
    CopyFrom(from);
    return *this;
  }
  inline Frame& operator=(Frame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Frame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Frame* internal_default_instance() {
    return reinterpret_cast<const Frame*>(
               &_Frame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Frame& a, Frame& b) {
    a.Swap(&b);
  }
  inline void Swap(Frame* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Frame* New() const final {
    return CreateMaybeMessage<Frame>(nullptr);
  }

  Frame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Frame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Frame& from);
  void MergeFrom(const Frame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Frame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frame.Frame";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Frame_2eproto);
    return ::descriptor_table_Frame_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeamsFieldNumber = 1,
    kCadFieldNumber = 2,
    kDateFieldNumber = 3,
  };
  // repeated .frame.SeamInfo seams = 1;
  int seams_size() const;
  private:
  int _internal_seams_size() const;
  public:
  void clear_seams();
  ::frame::SeamInfo* mutable_seams(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::SeamInfo >*
      mutable_seams();
  private:
  const ::frame::SeamInfo& _internal_seams(int index) const;
  ::frame::SeamInfo* _internal_add_seams();
  public:
  const ::frame::SeamInfo& seams(int index) const;
  ::frame::SeamInfo* add_seams();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::SeamInfo >&
      seams() const;

  // repeated .frame.Cad cad = 2;
  int cad_size() const;
  private:
  int _internal_cad_size() const;
  public:
  void clear_cad();
  ::frame::Cad* mutable_cad(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::Cad >*
      mutable_cad();
  private:
  const ::frame::Cad& _internal_cad(int index) const;
  ::frame::Cad* _internal_add_cad();
  public:
  const ::frame::Cad& cad(int index) const;
  ::frame::Cad* add_cad();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::Cad >&
      cad() const;

  // string date = 3;
  void clear_date();
  const std::string& date() const;
  void set_date(const std::string& value);
  void set_date(std::string&& value);
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  std::string* mutable_date();
  std::string* release_date();
  void set_allocated_date(std::string* date);
  private:
  const std::string& _internal_date() const;
  void _internal_set_date(const std::string& value);
  std::string* _internal_mutable_date();
  public:

  // @@protoc_insertion_point(class_scope:frame.Frame)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::SeamInfo > seams_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::Cad > cad_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Frame_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Pos

// double x = 1;
inline void Pos::clear_x() {
  x_ = 0;
}
inline double Pos::_internal_x() const {
  return x_;
}
inline double Pos::x() const {
  // @@protoc_insertion_point(field_get:frame.Pos.x)
  return _internal_x();
}
inline void Pos::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Pos::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:frame.Pos.x)
}

// double y = 2;
inline void Pos::clear_y() {
  y_ = 0;
}
inline double Pos::_internal_y() const {
  return y_;
}
inline double Pos::y() const {
  // @@protoc_insertion_point(field_get:frame.Pos.y)
  return _internal_y();
}
inline void Pos::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Pos::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:frame.Pos.y)
}

// double z = 3;
inline void Pos::clear_z() {
  z_ = 0;
}
inline double Pos::_internal_z() const {
  return z_;
}
inline double Pos::z() const {
  // @@protoc_insertion_point(field_get:frame.Pos.z)
  return _internal_z();
}
inline void Pos::_internal_set_z(double value) {
  
  z_ = value;
}
inline void Pos::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:frame.Pos.z)
}

// double a = 4;
inline void Pos::clear_a() {
  a_ = 0;
}
inline double Pos::_internal_a() const {
  return a_;
}
inline double Pos::a() const {
  // @@protoc_insertion_point(field_get:frame.Pos.a)
  return _internal_a();
}
inline void Pos::_internal_set_a(double value) {
  
  a_ = value;
}
inline void Pos::set_a(double value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:frame.Pos.a)
}

// double b = 5;
inline void Pos::clear_b() {
  b_ = 0;
}
inline double Pos::_internal_b() const {
  return b_;
}
inline double Pos::b() const {
  // @@protoc_insertion_point(field_get:frame.Pos.b)
  return _internal_b();
}
inline void Pos::_internal_set_b(double value) {
  
  b_ = value;
}
inline void Pos::set_b(double value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:frame.Pos.b)
}

// double c = 6;
inline void Pos::clear_c() {
  c_ = 0;
}
inline double Pos::_internal_c() const {
  return c_;
}
inline double Pos::c() const {
  // @@protoc_insertion_point(field_get:frame.Pos.c)
  return _internal_c();
}
inline void Pos::_internal_set_c(double value) {
  
  c_ = value;
}
inline void Pos::set_c(double value) {
  _internal_set_c(value);
  // @@protoc_insertion_point(field_set:frame.Pos.c)
}

// -------------------------------------------------------------------

// AScanePos

// .frame.Pos pos = 1;
inline bool AScanePos::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool AScanePos::has_pos() const {
  return _internal_has_pos();
}
inline void AScanePos::clear_pos() {
  if (GetArenaNoVirtual() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
inline const ::frame::Pos& AScanePos::_internal_pos() const {
  const ::frame::Pos* p = pos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::frame::Pos*>(
      &::frame::_Pos_default_instance_);
}
inline const ::frame::Pos& AScanePos::pos() const {
  // @@protoc_insertion_point(field_get:frame.AScanePos.pos)
  return _internal_pos();
}
inline ::frame::Pos* AScanePos::release_pos() {
  // @@protoc_insertion_point(field_release:frame.AScanePos.pos)
  
  ::frame::Pos* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::frame::Pos* AScanePos::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::frame::Pos>(GetArenaNoVirtual());
    pos_ = p;
  }
  return pos_;
}
inline ::frame::Pos* AScanePos::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:frame.AScanePos.pos)
  return _internal_mutable_pos();
}
inline void AScanePos::set_allocated_pos(::frame::Pos* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:frame.AScanePos.pos)
}

// int32 camera = 2;
inline void AScanePos::clear_camera() {
  camera_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AScanePos::_internal_camera() const {
  return camera_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AScanePos::camera() const {
  // @@protoc_insertion_point(field_get:frame.AScanePos.camera)
  return _internal_camera();
}
inline void AScanePos::_internal_set_camera(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  camera_ = value;
}
inline void AScanePos::set_camera(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_camera(value);
  // @@protoc_insertion_point(field_set:frame.AScanePos.camera)
}

// int32 enabled = 3;
inline void AScanePos::clear_enabled() {
  enabled_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AScanePos::_internal_enabled() const {
  return enabled_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AScanePos::enabled() const {
  // @@protoc_insertion_point(field_get:frame.AScanePos.enabled)
  return _internal_enabled();
}
inline void AScanePos::_internal_set_enabled(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  enabled_ = value;
}
inline void AScanePos::set_enabled(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:frame.AScanePos.enabled)
}

// int32 index1 = 4;
inline void AScanePos::clear_index1() {
  index1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AScanePos::_internal_index1() const {
  return index1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AScanePos::index1() const {
  // @@protoc_insertion_point(field_get:frame.AScanePos.index1)
  return _internal_index1();
}
inline void AScanePos::_internal_set_index1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index1_ = value;
}
inline void AScanePos::set_index1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index1(value);
  // @@protoc_insertion_point(field_set:frame.AScanePos.index1)
}

// double angle1 = 5;
inline void AScanePos::clear_angle1() {
  angle1_ = 0;
}
inline double AScanePos::_internal_angle1() const {
  return angle1_;
}
inline double AScanePos::angle1() const {
  // @@protoc_insertion_point(field_get:frame.AScanePos.angle1)
  return _internal_angle1();
}
inline void AScanePos::_internal_set_angle1(double value) {
  
  angle1_ = value;
}
inline void AScanePos::set_angle1(double value) {
  _internal_set_angle1(value);
  // @@protoc_insertion_point(field_set:frame.AScanePos.angle1)
}

// double angle2 = 6;
inline void AScanePos::clear_angle2() {
  angle2_ = 0;
}
inline double AScanePos::_internal_angle2() const {
  return angle2_;
}
inline double AScanePos::angle2() const {
  // @@protoc_insertion_point(field_get:frame.AScanePos.angle2)
  return _internal_angle2();
}
inline void AScanePos::_internal_set_angle2(double value) {
  
  angle2_ = value;
}
inline void AScanePos::set_angle2(double value) {
  _internal_set_angle2(value);
  // @@protoc_insertion_point(field_set:frame.AScanePos.angle2)
}

// double angle3 = 7;
inline void AScanePos::clear_angle3() {
  angle3_ = 0;
}
inline double AScanePos::_internal_angle3() const {
  return angle3_;
}
inline double AScanePos::angle3() const {
  // @@protoc_insertion_point(field_get:frame.AScanePos.angle3)
  return _internal_angle3();
}
inline void AScanePos::_internal_set_angle3(double value) {
  
  angle3_ = value;
}
inline void AScanePos::set_angle3(double value) {
  _internal_set_angle3(value);
  // @@protoc_insertion_point(field_set:frame.AScanePos.angle3)
}

// -------------------------------------------------------------------

// AFramePos

// .frame.Pos pos = 1;
inline bool AFramePos::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool AFramePos::has_pos() const {
  return _internal_has_pos();
}
inline void AFramePos::clear_pos() {
  if (GetArenaNoVirtual() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
inline const ::frame::Pos& AFramePos::_internal_pos() const {
  const ::frame::Pos* p = pos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::frame::Pos*>(
      &::frame::_Pos_default_instance_);
}
inline const ::frame::Pos& AFramePos::pos() const {
  // @@protoc_insertion_point(field_get:frame.AFramePos.pos)
  return _internal_pos();
}
inline ::frame::Pos* AFramePos::release_pos() {
  // @@protoc_insertion_point(field_release:frame.AFramePos.pos)
  
  ::frame::Pos* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::frame::Pos* AFramePos::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::frame::Pos>(GetArenaNoVirtual());
    pos_ = p;
  }
  return pos_;
}
inline ::frame::Pos* AFramePos::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:frame.AFramePos.pos)
  return _internal_mutable_pos();
}
inline void AFramePos::set_allocated_pos(::frame::Pos* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:frame.AFramePos.pos)
}

// int32 weld = 2;
inline void AFramePos::clear_weld() {
  weld_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AFramePos::_internal_weld() const {
  return weld_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AFramePos::weld() const {
  // @@protoc_insertion_point(field_get:frame.AFramePos.weld)
  return _internal_weld();
}
inline void AFramePos::_internal_set_weld(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  weld_ = value;
}
inline void AFramePos::set_weld(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_weld(value);
  // @@protoc_insertion_point(field_set:frame.AFramePos.weld)
}

// int32 height = 3;
inline void AFramePos::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AFramePos::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AFramePos::height() const {
  // @@protoc_insertion_point(field_get:frame.AFramePos.height)
  return _internal_height();
}
inline void AFramePos::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
}
inline void AFramePos::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:frame.AFramePos.height)
}

// int32 enabled = 4;
inline void AFramePos::clear_enabled() {
  enabled_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AFramePos::_internal_enabled() const {
  return enabled_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AFramePos::enabled() const {
  // @@protoc_insertion_point(field_get:frame.AFramePos.enabled)
  return _internal_enabled();
}
inline void AFramePos::_internal_set_enabled(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  enabled_ = value;
}
inline void AFramePos::set_enabled(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:frame.AFramePos.enabled)
}

// int32 index1 = 5;
inline void AFramePos::clear_index1() {
  index1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AFramePos::_internal_index1() const {
  return index1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AFramePos::index1() const {
  // @@protoc_insertion_point(field_get:frame.AFramePos.index1)
  return _internal_index1();
}
inline void AFramePos::_internal_set_index1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index1_ = value;
}
inline void AFramePos::set_index1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index1(value);
  // @@protoc_insertion_point(field_set:frame.AFramePos.index1)
}

// double angle1 = 6;
inline void AFramePos::clear_angle1() {
  angle1_ = 0;
}
inline double AFramePos::_internal_angle1() const {
  return angle1_;
}
inline double AFramePos::angle1() const {
  // @@protoc_insertion_point(field_get:frame.AFramePos.angle1)
  return _internal_angle1();
}
inline void AFramePos::_internal_set_angle1(double value) {
  
  angle1_ = value;
}
inline void AFramePos::set_angle1(double value) {
  _internal_set_angle1(value);
  // @@protoc_insertion_point(field_set:frame.AFramePos.angle1)
}

// double angle2 = 7;
inline void AFramePos::clear_angle2() {
  angle2_ = 0;
}
inline double AFramePos::_internal_angle2() const {
  return angle2_;
}
inline double AFramePos::angle2() const {
  // @@protoc_insertion_point(field_get:frame.AFramePos.angle2)
  return _internal_angle2();
}
inline void AFramePos::_internal_set_angle2(double value) {
  
  angle2_ = value;
}
inline void AFramePos::set_angle2(double value) {
  _internal_set_angle2(value);
  // @@protoc_insertion_point(field_set:frame.AFramePos.angle2)
}

// double angle3 = 8;
inline void AFramePos::clear_angle3() {
  angle3_ = 0;
}
inline double AFramePos::_internal_angle3() const {
  return angle3_;
}
inline double AFramePos::angle3() const {
  // @@protoc_insertion_point(field_get:frame.AFramePos.angle3)
  return _internal_angle3();
}
inline void AFramePos::_internal_set_angle3(double value) {
  
  angle3_ = value;
}
inline void AFramePos::set_angle3(double value) {
  _internal_set_angle3(value);
  // @@protoc_insertion_point(field_set:frame.AFramePos.angle3)
}

// -------------------------------------------------------------------

// SeamRelate

// double spacing1 = 1;
inline void SeamRelate::clear_spacing1() {
  spacing1_ = 0;
}
inline double SeamRelate::_internal_spacing1() const {
  return spacing1_;
}
inline double SeamRelate::spacing1() const {
  // @@protoc_insertion_point(field_get:frame.SeamRelate.spacing1)
  return _internal_spacing1();
}
inline void SeamRelate::_internal_set_spacing1(double value) {
  
  spacing1_ = value;
}
inline void SeamRelate::set_spacing1(double value) {
  _internal_set_spacing1(value);
  // @@protoc_insertion_point(field_set:frame.SeamRelate.spacing1)
}

// double distance1 = 2;
inline void SeamRelate::clear_distance1() {
  distance1_ = 0;
}
inline double SeamRelate::_internal_distance1() const {
  return distance1_;
}
inline double SeamRelate::distance1() const {
  // @@protoc_insertion_point(field_get:frame.SeamRelate.distance1)
  return _internal_distance1();
}
inline void SeamRelate::_internal_set_distance1(double value) {
  
  distance1_ = value;
}
inline void SeamRelate::set_distance1(double value) {
  _internal_set_distance1(value);
  // @@protoc_insertion_point(field_set:frame.SeamRelate.distance1)
}

// double spacing2 = 3;
inline void SeamRelate::clear_spacing2() {
  spacing2_ = 0;
}
inline double SeamRelate::_internal_spacing2() const {
  return spacing2_;
}
inline double SeamRelate::spacing2() const {
  // @@protoc_insertion_point(field_get:frame.SeamRelate.spacing2)
  return _internal_spacing2();
}
inline void SeamRelate::_internal_set_spacing2(double value) {
  
  spacing2_ = value;
}
inline void SeamRelate::set_spacing2(double value) {
  _internal_set_spacing2(value);
  // @@protoc_insertion_point(field_set:frame.SeamRelate.spacing2)
}

// double distance2 = 4;
inline void SeamRelate::clear_distance2() {
  distance2_ = 0;
}
inline double SeamRelate::_internal_distance2() const {
  return distance2_;
}
inline double SeamRelate::distance2() const {
  // @@protoc_insertion_point(field_get:frame.SeamRelate.distance2)
  return _internal_distance2();
}
inline void SeamRelate::_internal_set_distance2(double value) {
  
  distance2_ = value;
}
inline void SeamRelate::set_distance2(double value) {
  _internal_set_distance2(value);
  // @@protoc_insertion_point(field_set:frame.SeamRelate.distance2)
}

// int32 bind1 = 5;
inline void SeamRelate::clear_bind1() {
  bind1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SeamRelate::_internal_bind1() const {
  return bind1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SeamRelate::bind1() const {
  // @@protoc_insertion_point(field_get:frame.SeamRelate.bind1)
  return _internal_bind1();
}
inline void SeamRelate::_internal_set_bind1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bind1_ = value;
}
inline void SeamRelate::set_bind1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bind1(value);
  // @@protoc_insertion_point(field_set:frame.SeamRelate.bind1)
}

// int32 bind2 = 6;
inline void SeamRelate::clear_bind2() {
  bind2_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SeamRelate::_internal_bind2() const {
  return bind2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SeamRelate::bind2() const {
  // @@protoc_insertion_point(field_get:frame.SeamRelate.bind2)
  return _internal_bind2();
}
inline void SeamRelate::_internal_set_bind2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bind2_ = value;
}
inline void SeamRelate::set_bind2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bind2(value);
  // @@protoc_insertion_point(field_set:frame.SeamRelate.bind2)
}

// int32 seFlag = 7;
inline void SeamRelate::clear_seflag() {
  seflag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SeamRelate::_internal_seflag() const {
  return seflag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SeamRelate::seflag() const {
  // @@protoc_insertion_point(field_get:frame.SeamRelate.seFlag)
  return _internal_seflag();
}
inline void SeamRelate::_internal_set_seflag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  seflag_ = value;
}
inline void SeamRelate::set_seflag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_seflag(value);
  // @@protoc_insertion_point(field_set:frame.SeamRelate.seFlag)
}

// -------------------------------------------------------------------

// SeamWeldInfo

// int32 weldorder = 1;
inline void SeamWeldInfo::clear_weldorder() {
  weldorder_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SeamWeldInfo::_internal_weldorder() const {
  return weldorder_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SeamWeldInfo::weldorder() const {
  // @@protoc_insertion_point(field_get:frame.SeamWeldInfo.weldorder)
  return _internal_weldorder();
}
inline void SeamWeldInfo::_internal_set_weldorder(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  weldorder_ = value;
}
inline void SeamWeldInfo::set_weldorder(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_weldorder(value);
  // @@protoc_insertion_point(field_set:frame.SeamWeldInfo.weldorder)
}

// .frame.Pos offset = 2;
inline bool SeamWeldInfo::_internal_has_offset() const {
  return this != internal_default_instance() && offset_ != nullptr;
}
inline bool SeamWeldInfo::has_offset() const {
  return _internal_has_offset();
}
inline void SeamWeldInfo::clear_offset() {
  if (GetArenaNoVirtual() == nullptr && offset_ != nullptr) {
    delete offset_;
  }
  offset_ = nullptr;
}
inline const ::frame::Pos& SeamWeldInfo::_internal_offset() const {
  const ::frame::Pos* p = offset_;
  return p != nullptr ? *p : *reinterpret_cast<const ::frame::Pos*>(
      &::frame::_Pos_default_instance_);
}
inline const ::frame::Pos& SeamWeldInfo::offset() const {
  // @@protoc_insertion_point(field_get:frame.SeamWeldInfo.offset)
  return _internal_offset();
}
inline ::frame::Pos* SeamWeldInfo::release_offset() {
  // @@protoc_insertion_point(field_release:frame.SeamWeldInfo.offset)
  
  ::frame::Pos* temp = offset_;
  offset_ = nullptr;
  return temp;
}
inline ::frame::Pos* SeamWeldInfo::_internal_mutable_offset() {
  
  if (offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::frame::Pos>(GetArenaNoVirtual());
    offset_ = p;
  }
  return offset_;
}
inline ::frame::Pos* SeamWeldInfo::mutable_offset() {
  // @@protoc_insertion_point(field_mutable:frame.SeamWeldInfo.offset)
  return _internal_mutable_offset();
}
inline void SeamWeldInfo::set_allocated_offset(::frame::Pos* offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete offset_;
  }
  if (offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offset, submessage_arena);
    }
    
  } else {
    
  }
  offset_ = offset;
  // @@protoc_insertion_point(field_set_allocated:frame.SeamWeldInfo.offset)
}

// .frame.Pos baseoffset = 3;
inline bool SeamWeldInfo::_internal_has_baseoffset() const {
  return this != internal_default_instance() && baseoffset_ != nullptr;
}
inline bool SeamWeldInfo::has_baseoffset() const {
  return _internal_has_baseoffset();
}
inline void SeamWeldInfo::clear_baseoffset() {
  if (GetArenaNoVirtual() == nullptr && baseoffset_ != nullptr) {
    delete baseoffset_;
  }
  baseoffset_ = nullptr;
}
inline const ::frame::Pos& SeamWeldInfo::_internal_baseoffset() const {
  const ::frame::Pos* p = baseoffset_;
  return p != nullptr ? *p : *reinterpret_cast<const ::frame::Pos*>(
      &::frame::_Pos_default_instance_);
}
inline const ::frame::Pos& SeamWeldInfo::baseoffset() const {
  // @@protoc_insertion_point(field_get:frame.SeamWeldInfo.baseoffset)
  return _internal_baseoffset();
}
inline ::frame::Pos* SeamWeldInfo::release_baseoffset() {
  // @@protoc_insertion_point(field_release:frame.SeamWeldInfo.baseoffset)
  
  ::frame::Pos* temp = baseoffset_;
  baseoffset_ = nullptr;
  return temp;
}
inline ::frame::Pos* SeamWeldInfo::_internal_mutable_baseoffset() {
  
  if (baseoffset_ == nullptr) {
    auto* p = CreateMaybeMessage<::frame::Pos>(GetArenaNoVirtual());
    baseoffset_ = p;
  }
  return baseoffset_;
}
inline ::frame::Pos* SeamWeldInfo::mutable_baseoffset() {
  // @@protoc_insertion_point(field_mutable:frame.SeamWeldInfo.baseoffset)
  return _internal_mutable_baseoffset();
}
inline void SeamWeldInfo::set_allocated_baseoffset(::frame::Pos* baseoffset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete baseoffset_;
  }
  if (baseoffset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      baseoffset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, baseoffset, submessage_arena);
    }
    
  } else {
    
  }
  baseoffset_ = baseoffset;
  // @@protoc_insertion_point(field_set_allocated:frame.SeamWeldInfo.baseoffset)
}

// -------------------------------------------------------------------

// WeldParament

// int32 s_w = 1;
inline void WeldParament::clear_s_w() {
  s_w_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WeldParament::_internal_s_w() const {
  return s_w_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WeldParament::s_w() const {
  // @@protoc_insertion_point(field_get:frame.WeldParament.s_w)
  return _internal_s_w();
}
inline void WeldParament::_internal_set_s_w(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  s_w_ = value;
}
inline void WeldParament::set_s_w(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_s_w(value);
  // @@protoc_insertion_point(field_set:frame.WeldParament.s_w)
}

// int32 i_w = 2;
inline void WeldParament::clear_i_w() {
  i_w_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WeldParament::_internal_i_w() const {
  return i_w_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WeldParament::i_w() const {
  // @@protoc_insertion_point(field_get:frame.WeldParament.i_w)
  return _internal_i_w();
}
inline void WeldParament::_internal_set_i_w(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  i_w_ = value;
}
inline void WeldParament::set_i_w(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_i_w(value);
  // @@protoc_insertion_point(field_set:frame.WeldParament.i_w)
}

// int32 v_w = 3;
inline void WeldParament::clear_v_w() {
  v_w_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WeldParament::_internal_v_w() const {
  return v_w_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WeldParament::v_w() const {
  // @@protoc_insertion_point(field_get:frame.WeldParament.v_w)
  return _internal_v_w();
}
inline void WeldParament::_internal_set_v_w(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  v_w_ = value;
}
inline void WeldParament::set_v_w(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_v_w(value);
  // @@protoc_insertion_point(field_set:frame.WeldParament.v_w)
}

// int32 t_end = 4;
inline void WeldParament::clear_t_end() {
  t_end_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WeldParament::_internal_t_end() const {
  return t_end_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WeldParament::t_end() const {
  // @@protoc_insertion_point(field_get:frame.WeldParament.t_end)
  return _internal_t_end();
}
inline void WeldParament::_internal_set_t_end(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  t_end_ = value;
}
inline void WeldParament::set_t_end(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_t_end(value);
  // @@protoc_insertion_point(field_set:frame.WeldParament.t_end)
}

// int32 i_end = 5;
inline void WeldParament::clear_i_end() {
  i_end_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WeldParament::_internal_i_end() const {
  return i_end_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WeldParament::i_end() const {
  // @@protoc_insertion_point(field_get:frame.WeldParament.i_end)
  return _internal_i_end();
}
inline void WeldParament::_internal_set_i_end(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  i_end_ = value;
}
inline void WeldParament::set_i_end(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_i_end(value);
  // @@protoc_insertion_point(field_set:frame.WeldParament.i_end)
}

// int32 v_end = 6;
inline void WeldParament::clear_v_end() {
  v_end_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WeldParament::_internal_v_end() const {
  return v_end_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WeldParament::v_end() const {
  // @@protoc_insertion_point(field_get:frame.WeldParament.v_end)
  return _internal_v_end();
}
inline void WeldParament::_internal_set_v_end(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  v_end_ = value;
}
inline void WeldParament::set_v_end(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_v_end(value);
  // @@protoc_insertion_point(field_set:frame.WeldParament.v_end)
}

// int32 range = 7;
inline void WeldParament::clear_range() {
  range_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WeldParament::_internal_range() const {
  return range_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WeldParament::range() const {
  // @@protoc_insertion_point(field_get:frame.WeldParament.range)
  return _internal_range();
}
inline void WeldParament::_internal_set_range(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  range_ = value;
}
inline void WeldParament::set_range(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_range(value);
  // @@protoc_insertion_point(field_set:frame.WeldParament.range)
}

// int32 axis_x = 8;
inline void WeldParament::clear_axis_x() {
  axis_x_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WeldParament::_internal_axis_x() const {
  return axis_x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WeldParament::axis_x() const {
  // @@protoc_insertion_point(field_get:frame.WeldParament.axis_x)
  return _internal_axis_x();
}
inline void WeldParament::_internal_set_axis_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  axis_x_ = value;
}
inline void WeldParament::set_axis_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_axis_x(value);
  // @@protoc_insertion_point(field_set:frame.WeldParament.axis_x)
}

// int32 axis_y = 9;
inline void WeldParament::clear_axis_y() {
  axis_y_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WeldParament::_internal_axis_y() const {
  return axis_y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WeldParament::axis_y() const {
  // @@protoc_insertion_point(field_get:frame.WeldParament.axis_y)
  return _internal_axis_y();
}
inline void WeldParament::_internal_set_axis_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  axis_y_ = value;
}
inline void WeldParament::set_axis_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_axis_y(value);
  // @@protoc_insertion_point(field_set:frame.WeldParament.axis_y)
}

// -------------------------------------------------------------------

// Cad

// string cadid = 1;
inline void Cad::clear_cadid() {
  cadid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Cad::cadid() const {
  // @@protoc_insertion_point(field_get:frame.Cad.cadid)
  return _internal_cadid();
}
inline void Cad::set_cadid(const std::string& value) {
  _internal_set_cadid(value);
  // @@protoc_insertion_point(field_set:frame.Cad.cadid)
}
inline std::string* Cad::mutable_cadid() {
  // @@protoc_insertion_point(field_mutable:frame.Cad.cadid)
  return _internal_mutable_cadid();
}
inline const std::string& Cad::_internal_cadid() const {
  return cadid_.GetNoArena();
}
inline void Cad::_internal_set_cadid(const std::string& value) {
  
  cadid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Cad::set_cadid(std::string&& value) {
  
  cadid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:frame.Cad.cadid)
}
inline void Cad::set_cadid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cadid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:frame.Cad.cadid)
}
inline void Cad::set_cadid(const char* value, size_t size) {
  
  cadid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:frame.Cad.cadid)
}
inline std::string* Cad::_internal_mutable_cadid() {
  
  return cadid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Cad::release_cadid() {
  // @@protoc_insertion_point(field_release:frame.Cad.cadid)
  
  return cadid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Cad::set_allocated_cadid(std::string* cadid) {
  if (cadid != nullptr) {
    
  } else {
    
  }
  cadid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cadid);
  // @@protoc_insertion_point(field_set_allocated:frame.Cad.cadid)
}

// int32 cadMidPoint = 2;
inline void Cad::clear_cadmidpoint() {
  cadmidpoint_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Cad::_internal_cadmidpoint() const {
  return cadmidpoint_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Cad::cadmidpoint() const {
  // @@protoc_insertion_point(field_get:frame.Cad.cadMidPoint)
  return _internal_cadmidpoint();
}
inline void Cad::_internal_set_cadmidpoint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cadmidpoint_ = value;
}
inline void Cad::set_cadmidpoint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cadmidpoint(value);
  // @@protoc_insertion_point(field_set:frame.Cad.cadMidPoint)
}

// .frame.Pos cadBasePos = 3;
inline bool Cad::_internal_has_cadbasepos() const {
  return this != internal_default_instance() && cadbasepos_ != nullptr;
}
inline bool Cad::has_cadbasepos() const {
  return _internal_has_cadbasepos();
}
inline void Cad::clear_cadbasepos() {
  if (GetArenaNoVirtual() == nullptr && cadbasepos_ != nullptr) {
    delete cadbasepos_;
  }
  cadbasepos_ = nullptr;
}
inline const ::frame::Pos& Cad::_internal_cadbasepos() const {
  const ::frame::Pos* p = cadbasepos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::frame::Pos*>(
      &::frame::_Pos_default_instance_);
}
inline const ::frame::Pos& Cad::cadbasepos() const {
  // @@protoc_insertion_point(field_get:frame.Cad.cadBasePos)
  return _internal_cadbasepos();
}
inline ::frame::Pos* Cad::release_cadbasepos() {
  // @@protoc_insertion_point(field_release:frame.Cad.cadBasePos)
  
  ::frame::Pos* temp = cadbasepos_;
  cadbasepos_ = nullptr;
  return temp;
}
inline ::frame::Pos* Cad::_internal_mutable_cadbasepos() {
  
  if (cadbasepos_ == nullptr) {
    auto* p = CreateMaybeMessage<::frame::Pos>(GetArenaNoVirtual());
    cadbasepos_ = p;
  }
  return cadbasepos_;
}
inline ::frame::Pos* Cad::mutable_cadbasepos() {
  // @@protoc_insertion_point(field_mutable:frame.Cad.cadBasePos)
  return _internal_mutable_cadbasepos();
}
inline void Cad::set_allocated_cadbasepos(::frame::Pos* cadbasepos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete cadbasepos_;
  }
  if (cadbasepos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cadbasepos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cadbasepos, submessage_arena);
    }
    
  } else {
    
  }
  cadbasepos_ = cadbasepos;
  // @@protoc_insertion_point(field_set_allocated:frame.Cad.cadBasePos)
}

// double safeAngle1 = 4;
inline void Cad::clear_safeangle1() {
  safeangle1_ = 0;
}
inline double Cad::_internal_safeangle1() const {
  return safeangle1_;
}
inline double Cad::safeangle1() const {
  // @@protoc_insertion_point(field_get:frame.Cad.safeAngle1)
  return _internal_safeangle1();
}
inline void Cad::_internal_set_safeangle1(double value) {
  
  safeangle1_ = value;
}
inline void Cad::set_safeangle1(double value) {
  _internal_set_safeangle1(value);
  // @@protoc_insertion_point(field_set:frame.Cad.safeAngle1)
}

// int32 safeLoc = 5;
inline void Cad::clear_safeloc() {
  safeloc_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Cad::_internal_safeloc() const {
  return safeloc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Cad::safeloc() const {
  // @@protoc_insertion_point(field_get:frame.Cad.safeLoc)
  return _internal_safeloc();
}
inline void Cad::_internal_set_safeloc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  safeloc_ = value;
}
inline void Cad::set_safeloc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_safeloc(value);
  // @@protoc_insertion_point(field_set:frame.Cad.safeLoc)
}

// -------------------------------------------------------------------

// Machine

// double pos_motor_start = 1;
inline void Machine::clear_pos_motor_start() {
  pos_motor_start_ = 0;
}
inline double Machine::_internal_pos_motor_start() const {
  return pos_motor_start_;
}
inline double Machine::pos_motor_start() const {
  // @@protoc_insertion_point(field_get:frame.Machine.pos_motor_start)
  return _internal_pos_motor_start();
}
inline void Machine::_internal_set_pos_motor_start(double value) {
  
  pos_motor_start_ = value;
}
inline void Machine::set_pos_motor_start(double value) {
  _internal_set_pos_motor_start(value);
  // @@protoc_insertion_point(field_set:frame.Machine.pos_motor_start)
}

// double pos_motor_stop = 2;
inline void Machine::clear_pos_motor_stop() {
  pos_motor_stop_ = 0;
}
inline double Machine::_internal_pos_motor_stop() const {
  return pos_motor_stop_;
}
inline double Machine::pos_motor_stop() const {
  // @@protoc_insertion_point(field_get:frame.Machine.pos_motor_stop)
  return _internal_pos_motor_stop();
}
inline void Machine::_internal_set_pos_motor_stop(double value) {
  
  pos_motor_stop_ = value;
}
inline void Machine::set_pos_motor_stop(double value) {
  _internal_set_pos_motor_stop(value);
  // @@protoc_insertion_point(field_set:frame.Machine.pos_motor_stop)
}

// double angle1_motor_start = 3;
inline void Machine::clear_angle1_motor_start() {
  angle1_motor_start_ = 0;
}
inline double Machine::_internal_angle1_motor_start() const {
  return angle1_motor_start_;
}
inline double Machine::angle1_motor_start() const {
  // @@protoc_insertion_point(field_get:frame.Machine.angle1_motor_start)
  return _internal_angle1_motor_start();
}
inline void Machine::_internal_set_angle1_motor_start(double value) {
  
  angle1_motor_start_ = value;
}
inline void Machine::set_angle1_motor_start(double value) {
  _internal_set_angle1_motor_start(value);
  // @@protoc_insertion_point(field_set:frame.Machine.angle1_motor_start)
}

// double angle1_motor_stop = 4;
inline void Machine::clear_angle1_motor_stop() {
  angle1_motor_stop_ = 0;
}
inline double Machine::_internal_angle1_motor_stop() const {
  return angle1_motor_stop_;
}
inline double Machine::angle1_motor_stop() const {
  // @@protoc_insertion_point(field_get:frame.Machine.angle1_motor_stop)
  return _internal_angle1_motor_stop();
}
inline void Machine::_internal_set_angle1_motor_stop(double value) {
  
  angle1_motor_stop_ = value;
}
inline void Machine::set_angle1_motor_stop(double value) {
  _internal_set_angle1_motor_stop(value);
  // @@protoc_insertion_point(field_set:frame.Machine.angle1_motor_stop)
}

// double angle2_motor_start = 5;
inline void Machine::clear_angle2_motor_start() {
  angle2_motor_start_ = 0;
}
inline double Machine::_internal_angle2_motor_start() const {
  return angle2_motor_start_;
}
inline double Machine::angle2_motor_start() const {
  // @@protoc_insertion_point(field_get:frame.Machine.angle2_motor_start)
  return _internal_angle2_motor_start();
}
inline void Machine::_internal_set_angle2_motor_start(double value) {
  
  angle2_motor_start_ = value;
}
inline void Machine::set_angle2_motor_start(double value) {
  _internal_set_angle2_motor_start(value);
  // @@protoc_insertion_point(field_set:frame.Machine.angle2_motor_start)
}

// double angle2_motor_stop = 6;
inline void Machine::clear_angle2_motor_stop() {
  angle2_motor_stop_ = 0;
}
inline double Machine::_internal_angle2_motor_stop() const {
  return angle2_motor_stop_;
}
inline double Machine::angle2_motor_stop() const {
  // @@protoc_insertion_point(field_get:frame.Machine.angle2_motor_stop)
  return _internal_angle2_motor_stop();
}
inline void Machine::_internal_set_angle2_motor_stop(double value) {
  
  angle2_motor_stop_ = value;
}
inline void Machine::set_angle2_motor_stop(double value) {
  _internal_set_angle2_motor_stop(value);
  // @@protoc_insertion_point(field_set:frame.Machine.angle2_motor_stop)
}

// double motor1speed = 7;
inline void Machine::clear_motor1speed() {
  motor1speed_ = 0;
}
inline double Machine::_internal_motor1speed() const {
  return motor1speed_;
}
inline double Machine::motor1speed() const {
  // @@protoc_insertion_point(field_get:frame.Machine.motor1speed)
  return _internal_motor1speed();
}
inline void Machine::_internal_set_motor1speed(double value) {
  
  motor1speed_ = value;
}
inline void Machine::set_motor1speed(double value) {
  _internal_set_motor1speed(value);
  // @@protoc_insertion_point(field_set:frame.Machine.motor1speed)
}

// double motor2speed = 8;
inline void Machine::clear_motor2speed() {
  motor2speed_ = 0;
}
inline double Machine::_internal_motor2speed() const {
  return motor2speed_;
}
inline double Machine::motor2speed() const {
  // @@protoc_insertion_point(field_get:frame.Machine.motor2speed)
  return _internal_motor2speed();
}
inline void Machine::_internal_set_motor2speed(double value) {
  
  motor2speed_ = value;
}
inline void Machine::set_motor2speed(double value) {
  _internal_set_motor2speed(value);
  // @@protoc_insertion_point(field_set:frame.Machine.motor2speed)
}

// double motor3speed = 9;
inline void Machine::clear_motor3speed() {
  motor3speed_ = 0;
}
inline double Machine::_internal_motor3speed() const {
  return motor3speed_;
}
inline double Machine::motor3speed() const {
  // @@protoc_insertion_point(field_get:frame.Machine.motor3speed)
  return _internal_motor3speed();
}
inline void Machine::_internal_set_motor3speed(double value) {
  
  motor3speed_ = value;
}
inline void Machine::set_motor3speed(double value) {
  _internal_set_motor3speed(value);
  // @@protoc_insertion_point(field_set:frame.Machine.motor3speed)
}

// -------------------------------------------------------------------

// SeamModify

// int32 main = 1;
inline void SeamModify::clear_main() {
  main_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SeamModify::_internal_main() const {
  return main_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SeamModify::main() const {
  // @@protoc_insertion_point(field_get:frame.SeamModify.main)
  return _internal_main();
}
inline void SeamModify::_internal_set_main(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  main_ = value;
}
inline void SeamModify::set_main(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_main(value);
  // @@protoc_insertion_point(field_set:frame.SeamModify.main)
}

// int32 rank = 2;
inline void SeamModify::clear_rank() {
  rank_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SeamModify::_internal_rank() const {
  return rank_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SeamModify::rank() const {
  // @@protoc_insertion_point(field_get:frame.SeamModify.rank)
  return _internal_rank();
}
inline void SeamModify::_internal_set_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rank_ = value;
}
inline void SeamModify::set_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:frame.SeamModify.rank)
}

// string seamType = 3;
inline void SeamModify::clear_seamtype() {
  seamtype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SeamModify::seamtype() const {
  // @@protoc_insertion_point(field_get:frame.SeamModify.seamType)
  return _internal_seamtype();
}
inline void SeamModify::set_seamtype(const std::string& value) {
  _internal_set_seamtype(value);
  // @@protoc_insertion_point(field_set:frame.SeamModify.seamType)
}
inline std::string* SeamModify::mutable_seamtype() {
  // @@protoc_insertion_point(field_mutable:frame.SeamModify.seamType)
  return _internal_mutable_seamtype();
}
inline const std::string& SeamModify::_internal_seamtype() const {
  return seamtype_.GetNoArena();
}
inline void SeamModify::_internal_set_seamtype(const std::string& value) {
  
  seamtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SeamModify::set_seamtype(std::string&& value) {
  
  seamtype_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:frame.SeamModify.seamType)
}
inline void SeamModify::set_seamtype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  seamtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:frame.SeamModify.seamType)
}
inline void SeamModify::set_seamtype(const char* value, size_t size) {
  
  seamtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:frame.SeamModify.seamType)
}
inline std::string* SeamModify::_internal_mutable_seamtype() {
  
  return seamtype_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SeamModify::release_seamtype() {
  // @@protoc_insertion_point(field_release:frame.SeamModify.seamType)
  
  return seamtype_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SeamModify::set_allocated_seamtype(std::string* seamtype) {
  if (seamtype != nullptr) {
    
  } else {
    
  }
  seamtype_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), seamtype);
  // @@protoc_insertion_point(field_set_allocated:frame.SeamModify.seamType)
}

// double DEPARTLEN = 4;
inline void SeamModify::clear_departlen() {
  departlen_ = 0;
}
inline double SeamModify::_internal_departlen() const {
  return departlen_;
}
inline double SeamModify::departlen() const {
  // @@protoc_insertion_point(field_get:frame.SeamModify.DEPARTLEN)
  return _internal_departlen();
}
inline void SeamModify::_internal_set_departlen(double value) {
  
  departlen_ = value;
}
inline void SeamModify::set_departlen(double value) {
  _internal_set_departlen(value);
  // @@protoc_insertion_point(field_set:frame.SeamModify.DEPARTLEN)
}

// int32 midPoint = 5;
inline void SeamModify::clear_midpoint() {
  midpoint_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SeamModify::_internal_midpoint() const {
  return midpoint_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SeamModify::midpoint() const {
  // @@protoc_insertion_point(field_get:frame.SeamModify.midPoint)
  return _internal_midpoint();
}
inline void SeamModify::_internal_set_midpoint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  midpoint_ = value;
}
inline void SeamModify::set_midpoint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_midpoint(value);
  // @@protoc_insertion_point(field_set:frame.SeamModify.midPoint)
}

// int32 MIDDLESTART = 6;
inline void SeamModify::clear_middlestart() {
  middlestart_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SeamModify::_internal_middlestart() const {
  return middlestart_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SeamModify::middlestart() const {
  // @@protoc_insertion_point(field_get:frame.SeamModify.MIDDLESTART)
  return _internal_middlestart();
}
inline void SeamModify::_internal_set_middlestart(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  middlestart_ = value;
}
inline void SeamModify::set_middlestart(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_middlestart(value);
  // @@protoc_insertion_point(field_set:frame.SeamModify.MIDDLESTART)
}

// string option1 = 7;
inline void SeamModify::clear_option1() {
  option1_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SeamModify::option1() const {
  // @@protoc_insertion_point(field_get:frame.SeamModify.option1)
  return _internal_option1();
}
inline void SeamModify::set_option1(const std::string& value) {
  _internal_set_option1(value);
  // @@protoc_insertion_point(field_set:frame.SeamModify.option1)
}
inline std::string* SeamModify::mutable_option1() {
  // @@protoc_insertion_point(field_mutable:frame.SeamModify.option1)
  return _internal_mutable_option1();
}
inline const std::string& SeamModify::_internal_option1() const {
  return option1_.GetNoArena();
}
inline void SeamModify::_internal_set_option1(const std::string& value) {
  
  option1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SeamModify::set_option1(std::string&& value) {
  
  option1_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:frame.SeamModify.option1)
}
inline void SeamModify::set_option1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  option1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:frame.SeamModify.option1)
}
inline void SeamModify::set_option1(const char* value, size_t size) {
  
  option1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:frame.SeamModify.option1)
}
inline std::string* SeamModify::_internal_mutable_option1() {
  
  return option1_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SeamModify::release_option1() {
  // @@protoc_insertion_point(field_release:frame.SeamModify.option1)
  
  return option1_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SeamModify::set_allocated_option1(std::string* option1) {
  if (option1 != nullptr) {
    
  } else {
    
  }
  option1_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), option1);
  // @@protoc_insertion_point(field_set_allocated:frame.SeamModify.option1)
}

// int32 autoFit = 8;
inline void SeamModify::clear_autofit() {
  autofit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SeamModify::_internal_autofit() const {
  return autofit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SeamModify::autofit() const {
  // @@protoc_insertion_point(field_get:frame.SeamModify.autoFit)
  return _internal_autofit();
}
inline void SeamModify::_internal_set_autofit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  autofit_ = value;
}
inline void SeamModify::set_autofit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_autofit(value);
  // @@protoc_insertion_point(field_set:frame.SeamModify.autoFit)
}

// int32 tracing = 9;
inline void SeamModify::clear_tracing() {
  tracing_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SeamModify::_internal_tracing() const {
  return tracing_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SeamModify::tracing() const {
  // @@protoc_insertion_point(field_get:frame.SeamModify.tracing)
  return _internal_tracing();
}
inline void SeamModify::_internal_set_tracing(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tracing_ = value;
}
inline void SeamModify::set_tracing(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tracing(value);
  // @@protoc_insertion_point(field_set:frame.SeamModify.tracing)
}

// double width = 10;
inline void SeamModify::clear_width() {
  width_ = 0;
}
inline double SeamModify::_internal_width() const {
  return width_;
}
inline double SeamModify::width() const {
  // @@protoc_insertion_point(field_get:frame.SeamModify.width)
  return _internal_width();
}
inline void SeamModify::_internal_set_width(double value) {
  
  width_ = value;
}
inline void SeamModify::set_width(double value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:frame.SeamModify.width)
}

// double height = 11;
inline void SeamModify::clear_height() {
  height_ = 0;
}
inline double SeamModify::_internal_height() const {
  return height_;
}
inline double SeamModify::height() const {
  // @@protoc_insertion_point(field_get:frame.SeamModify.height)
  return _internal_height();
}
inline void SeamModify::_internal_set_height(double value) {
  
  height_ = value;
}
inline void SeamModify::set_height(double value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:frame.SeamModify.height)
}

// int32 CORNERLEN = 12;
inline void SeamModify::clear_cornerlen() {
  cornerlen_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SeamModify::_internal_cornerlen() const {
  return cornerlen_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SeamModify::cornerlen() const {
  // @@protoc_insertion_point(field_get:frame.SeamModify.CORNERLEN)
  return _internal_cornerlen();
}
inline void SeamModify::_internal_set_cornerlen(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cornerlen_ = value;
}
inline void SeamModify::set_cornerlen(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cornerlen(value);
  // @@protoc_insertion_point(field_set:frame.SeamModify.CORNERLEN)
}

// int32 CORNERANGLE = 13;
inline void SeamModify::clear_cornerangle() {
  cornerangle_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SeamModify::_internal_cornerangle() const {
  return cornerangle_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SeamModify::cornerangle() const {
  // @@protoc_insertion_point(field_get:frame.SeamModify.CORNERANGLE)
  return _internal_cornerangle();
}
inline void SeamModify::_internal_set_cornerangle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cornerangle_ = value;
}
inline void SeamModify::set_cornerangle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cornerangle(value);
  // @@protoc_insertion_point(field_set:frame.SeamModify.CORNERANGLE)
}

// int32 enabled = 14;
inline void SeamModify::clear_enabled() {
  enabled_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SeamModify::_internal_enabled() const {
  return enabled_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SeamModify::enabled() const {
  // @@protoc_insertion_point(field_get:frame.SeamModify.enabled)
  return _internal_enabled();
}
inline void SeamModify::_internal_set_enabled(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  enabled_ = value;
}
inline void SeamModify::set_enabled(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:frame.SeamModify.enabled)
}

// -------------------------------------------------------------------

// SeamInfo

// repeated .frame.AFramePos framePos = 1;
inline int SeamInfo::_internal_framepos_size() const {
  return framepos_.size();
}
inline int SeamInfo::framepos_size() const {
  return _internal_framepos_size();
}
inline void SeamInfo::clear_framepos() {
  framepos_.Clear();
}
inline ::frame::AFramePos* SeamInfo::mutable_framepos(int index) {
  // @@protoc_insertion_point(field_mutable:frame.SeamInfo.framePos)
  return framepos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::AFramePos >*
SeamInfo::mutable_framepos() {
  // @@protoc_insertion_point(field_mutable_list:frame.SeamInfo.framePos)
  return &framepos_;
}
inline const ::frame::AFramePos& SeamInfo::_internal_framepos(int index) const {
  return framepos_.Get(index);
}
inline const ::frame::AFramePos& SeamInfo::framepos(int index) const {
  // @@protoc_insertion_point(field_get:frame.SeamInfo.framePos)
  return _internal_framepos(index);
}
inline ::frame::AFramePos* SeamInfo::_internal_add_framepos() {
  return framepos_.Add();
}
inline ::frame::AFramePos* SeamInfo::add_framepos() {
  // @@protoc_insertion_point(field_add:frame.SeamInfo.framePos)
  return _internal_add_framepos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::AFramePos >&
SeamInfo::framepos() const {
  // @@protoc_insertion_point(field_list:frame.SeamInfo.framePos)
  return framepos_;
}

// repeated .frame.AScanePos scanePos = 2;
inline int SeamInfo::_internal_scanepos_size() const {
  return scanepos_.size();
}
inline int SeamInfo::scanepos_size() const {
  return _internal_scanepos_size();
}
inline void SeamInfo::clear_scanepos() {
  scanepos_.Clear();
}
inline ::frame::AScanePos* SeamInfo::mutable_scanepos(int index) {
  // @@protoc_insertion_point(field_mutable:frame.SeamInfo.scanePos)
  return scanepos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::AScanePos >*
SeamInfo::mutable_scanepos() {
  // @@protoc_insertion_point(field_mutable_list:frame.SeamInfo.scanePos)
  return &scanepos_;
}
inline const ::frame::AScanePos& SeamInfo::_internal_scanepos(int index) const {
  return scanepos_.Get(index);
}
inline const ::frame::AScanePos& SeamInfo::scanepos(int index) const {
  // @@protoc_insertion_point(field_get:frame.SeamInfo.scanePos)
  return _internal_scanepos(index);
}
inline ::frame::AScanePos* SeamInfo::_internal_add_scanepos() {
  return scanepos_.Add();
}
inline ::frame::AScanePos* SeamInfo::add_scanepos() {
  // @@protoc_insertion_point(field_add:frame.SeamInfo.scanePos)
  return _internal_add_scanepos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::AScanePos >&
SeamInfo::scanepos() const {
  // @@protoc_insertion_point(field_list:frame.SeamInfo.scanePos)
  return scanepos_;
}

// .frame.SeamRelate relate = 3;
inline bool SeamInfo::_internal_has_relate() const {
  return this != internal_default_instance() && relate_ != nullptr;
}
inline bool SeamInfo::has_relate() const {
  return _internal_has_relate();
}
inline void SeamInfo::clear_relate() {
  if (GetArenaNoVirtual() == nullptr && relate_ != nullptr) {
    delete relate_;
  }
  relate_ = nullptr;
}
inline const ::frame::SeamRelate& SeamInfo::_internal_relate() const {
  const ::frame::SeamRelate* p = relate_;
  return p != nullptr ? *p : *reinterpret_cast<const ::frame::SeamRelate*>(
      &::frame::_SeamRelate_default_instance_);
}
inline const ::frame::SeamRelate& SeamInfo::relate() const {
  // @@protoc_insertion_point(field_get:frame.SeamInfo.relate)
  return _internal_relate();
}
inline ::frame::SeamRelate* SeamInfo::release_relate() {
  // @@protoc_insertion_point(field_release:frame.SeamInfo.relate)
  
  ::frame::SeamRelate* temp = relate_;
  relate_ = nullptr;
  return temp;
}
inline ::frame::SeamRelate* SeamInfo::_internal_mutable_relate() {
  
  if (relate_ == nullptr) {
    auto* p = CreateMaybeMessage<::frame::SeamRelate>(GetArenaNoVirtual());
    relate_ = p;
  }
  return relate_;
}
inline ::frame::SeamRelate* SeamInfo::mutable_relate() {
  // @@protoc_insertion_point(field_mutable:frame.SeamInfo.relate)
  return _internal_mutable_relate();
}
inline void SeamInfo::set_allocated_relate(::frame::SeamRelate* relate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete relate_;
  }
  if (relate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      relate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relate, submessage_arena);
    }
    
  } else {
    
  }
  relate_ = relate;
  // @@protoc_insertion_point(field_set_allocated:frame.SeamInfo.relate)
}

// .frame.SeamWeldInfo weldinfo = 4;
inline bool SeamInfo::_internal_has_weldinfo() const {
  return this != internal_default_instance() && weldinfo_ != nullptr;
}
inline bool SeamInfo::has_weldinfo() const {
  return _internal_has_weldinfo();
}
inline void SeamInfo::clear_weldinfo() {
  if (GetArenaNoVirtual() == nullptr && weldinfo_ != nullptr) {
    delete weldinfo_;
  }
  weldinfo_ = nullptr;
}
inline const ::frame::SeamWeldInfo& SeamInfo::_internal_weldinfo() const {
  const ::frame::SeamWeldInfo* p = weldinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::frame::SeamWeldInfo*>(
      &::frame::_SeamWeldInfo_default_instance_);
}
inline const ::frame::SeamWeldInfo& SeamInfo::weldinfo() const {
  // @@protoc_insertion_point(field_get:frame.SeamInfo.weldinfo)
  return _internal_weldinfo();
}
inline ::frame::SeamWeldInfo* SeamInfo::release_weldinfo() {
  // @@protoc_insertion_point(field_release:frame.SeamInfo.weldinfo)
  
  ::frame::SeamWeldInfo* temp = weldinfo_;
  weldinfo_ = nullptr;
  return temp;
}
inline ::frame::SeamWeldInfo* SeamInfo::_internal_mutable_weldinfo() {
  
  if (weldinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::frame::SeamWeldInfo>(GetArenaNoVirtual());
    weldinfo_ = p;
  }
  return weldinfo_;
}
inline ::frame::SeamWeldInfo* SeamInfo::mutable_weldinfo() {
  // @@protoc_insertion_point(field_mutable:frame.SeamInfo.weldinfo)
  return _internal_mutable_weldinfo();
}
inline void SeamInfo::set_allocated_weldinfo(::frame::SeamWeldInfo* weldinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete weldinfo_;
  }
  if (weldinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      weldinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weldinfo, submessage_arena);
    }
    
  } else {
    
  }
  weldinfo_ = weldinfo;
  // @@protoc_insertion_point(field_set_allocated:frame.SeamInfo.weldinfo)
}

// .frame.WeldParament weldPara = 5;
inline bool SeamInfo::_internal_has_weldpara() const {
  return this != internal_default_instance() && weldpara_ != nullptr;
}
inline bool SeamInfo::has_weldpara() const {
  return _internal_has_weldpara();
}
inline void SeamInfo::clear_weldpara() {
  if (GetArenaNoVirtual() == nullptr && weldpara_ != nullptr) {
    delete weldpara_;
  }
  weldpara_ = nullptr;
}
inline const ::frame::WeldParament& SeamInfo::_internal_weldpara() const {
  const ::frame::WeldParament* p = weldpara_;
  return p != nullptr ? *p : *reinterpret_cast<const ::frame::WeldParament*>(
      &::frame::_WeldParament_default_instance_);
}
inline const ::frame::WeldParament& SeamInfo::weldpara() const {
  // @@protoc_insertion_point(field_get:frame.SeamInfo.weldPara)
  return _internal_weldpara();
}
inline ::frame::WeldParament* SeamInfo::release_weldpara() {
  // @@protoc_insertion_point(field_release:frame.SeamInfo.weldPara)
  
  ::frame::WeldParament* temp = weldpara_;
  weldpara_ = nullptr;
  return temp;
}
inline ::frame::WeldParament* SeamInfo::_internal_mutable_weldpara() {
  
  if (weldpara_ == nullptr) {
    auto* p = CreateMaybeMessage<::frame::WeldParament>(GetArenaNoVirtual());
    weldpara_ = p;
  }
  return weldpara_;
}
inline ::frame::WeldParament* SeamInfo::mutable_weldpara() {
  // @@protoc_insertion_point(field_mutable:frame.SeamInfo.weldPara)
  return _internal_mutable_weldpara();
}
inline void SeamInfo::set_allocated_weldpara(::frame::WeldParament* weldpara) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete weldpara_;
  }
  if (weldpara) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      weldpara = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weldpara, submessage_arena);
    }
    
  } else {
    
  }
  weldpara_ = weldpara;
  // @@protoc_insertion_point(field_set_allocated:frame.SeamInfo.weldPara)
}

// string seamName = 6;
inline void SeamInfo::clear_seamname() {
  seamname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SeamInfo::seamname() const {
  // @@protoc_insertion_point(field_get:frame.SeamInfo.seamName)
  return _internal_seamname();
}
inline void SeamInfo::set_seamname(const std::string& value) {
  _internal_set_seamname(value);
  // @@protoc_insertion_point(field_set:frame.SeamInfo.seamName)
}
inline std::string* SeamInfo::mutable_seamname() {
  // @@protoc_insertion_point(field_mutable:frame.SeamInfo.seamName)
  return _internal_mutable_seamname();
}
inline const std::string& SeamInfo::_internal_seamname() const {
  return seamname_.GetNoArena();
}
inline void SeamInfo::_internal_set_seamname(const std::string& value) {
  
  seamname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SeamInfo::set_seamname(std::string&& value) {
  
  seamname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:frame.SeamInfo.seamName)
}
inline void SeamInfo::set_seamname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  seamname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:frame.SeamInfo.seamName)
}
inline void SeamInfo::set_seamname(const char* value, size_t size) {
  
  seamname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:frame.SeamInfo.seamName)
}
inline std::string* SeamInfo::_internal_mutable_seamname() {
  
  return seamname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SeamInfo::release_seamname() {
  // @@protoc_insertion_point(field_release:frame.SeamInfo.seamName)
  
  return seamname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SeamInfo::set_allocated_seamname(std::string* seamname) {
  if (seamname != nullptr) {
    
  } else {
    
  }
  seamname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), seamname);
  // @@protoc_insertion_point(field_set_allocated:frame.SeamInfo.seamName)
}

// int32 seamID = 7;
inline void SeamInfo::clear_seamid() {
  seamid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SeamInfo::_internal_seamid() const {
  return seamid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SeamInfo::seamid() const {
  // @@protoc_insertion_point(field_get:frame.SeamInfo.seamID)
  return _internal_seamid();
}
inline void SeamInfo::_internal_set_seamid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  seamid_ = value;
}
inline void SeamInfo::set_seamid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_seamid(value);
  // @@protoc_insertion_point(field_set:frame.SeamInfo.seamID)
}

// int32 orderIndex = 8;
inline void SeamInfo::clear_orderindex() {
  orderindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SeamInfo::_internal_orderindex() const {
  return orderindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SeamInfo::orderindex() const {
  // @@protoc_insertion_point(field_get:frame.SeamInfo.orderIndex)
  return _internal_orderindex();
}
inline void SeamInfo::_internal_set_orderindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  orderindex_ = value;
}
inline void SeamInfo::set_orderindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_orderindex(value);
  // @@protoc_insertion_point(field_set:frame.SeamInfo.orderIndex)
}

// int32 seamIndex = 9;
inline void SeamInfo::clear_seamindex() {
  seamindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SeamInfo::_internal_seamindex() const {
  return seamindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SeamInfo::seamindex() const {
  // @@protoc_insertion_point(field_get:frame.SeamInfo.seamIndex)
  return _internal_seamindex();
}
inline void SeamInfo::_internal_set_seamindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  seamindex_ = value;
}
inline void SeamInfo::set_seamindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_seamindex(value);
  // @@protoc_insertion_point(field_set:frame.SeamInfo.seamIndex)
}

// string cadid = 10;
inline void SeamInfo::clear_cadid() {
  cadid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SeamInfo::cadid() const {
  // @@protoc_insertion_point(field_get:frame.SeamInfo.cadid)
  return _internal_cadid();
}
inline void SeamInfo::set_cadid(const std::string& value) {
  _internal_set_cadid(value);
  // @@protoc_insertion_point(field_set:frame.SeamInfo.cadid)
}
inline std::string* SeamInfo::mutable_cadid() {
  // @@protoc_insertion_point(field_mutable:frame.SeamInfo.cadid)
  return _internal_mutable_cadid();
}
inline const std::string& SeamInfo::_internal_cadid() const {
  return cadid_.GetNoArena();
}
inline void SeamInfo::_internal_set_cadid(const std::string& value) {
  
  cadid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SeamInfo::set_cadid(std::string&& value) {
  
  cadid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:frame.SeamInfo.cadid)
}
inline void SeamInfo::set_cadid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cadid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:frame.SeamInfo.cadid)
}
inline void SeamInfo::set_cadid(const char* value, size_t size) {
  
  cadid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:frame.SeamInfo.cadid)
}
inline std::string* SeamInfo::_internal_mutable_cadid() {
  
  return cadid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SeamInfo::release_cadid() {
  // @@protoc_insertion_point(field_release:frame.SeamInfo.cadid)
  
  return cadid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SeamInfo::set_allocated_cadid(std::string* cadid) {
  if (cadid != nullptr) {
    
  } else {
    
  }
  cadid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cadid);
  // @@protoc_insertion_point(field_set_allocated:frame.SeamInfo.cadid)
}

// .frame.Machine machine = 11;
inline bool SeamInfo::_internal_has_machine() const {
  return this != internal_default_instance() && machine_ != nullptr;
}
inline bool SeamInfo::has_machine() const {
  return _internal_has_machine();
}
inline void SeamInfo::clear_machine() {
  if (GetArenaNoVirtual() == nullptr && machine_ != nullptr) {
    delete machine_;
  }
  machine_ = nullptr;
}
inline const ::frame::Machine& SeamInfo::_internal_machine() const {
  const ::frame::Machine* p = machine_;
  return p != nullptr ? *p : *reinterpret_cast<const ::frame::Machine*>(
      &::frame::_Machine_default_instance_);
}
inline const ::frame::Machine& SeamInfo::machine() const {
  // @@protoc_insertion_point(field_get:frame.SeamInfo.machine)
  return _internal_machine();
}
inline ::frame::Machine* SeamInfo::release_machine() {
  // @@protoc_insertion_point(field_release:frame.SeamInfo.machine)
  
  ::frame::Machine* temp = machine_;
  machine_ = nullptr;
  return temp;
}
inline ::frame::Machine* SeamInfo::_internal_mutable_machine() {
  
  if (machine_ == nullptr) {
    auto* p = CreateMaybeMessage<::frame::Machine>(GetArenaNoVirtual());
    machine_ = p;
  }
  return machine_;
}
inline ::frame::Machine* SeamInfo::mutable_machine() {
  // @@protoc_insertion_point(field_mutable:frame.SeamInfo.machine)
  return _internal_mutable_machine();
}
inline void SeamInfo::set_allocated_machine(::frame::Machine* machine) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete machine_;
  }
  if (machine) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      machine = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, machine, submessage_arena);
    }
    
  } else {
    
  }
  machine_ = machine;
  // @@protoc_insertion_point(field_set_allocated:frame.SeamInfo.machine)
}

// .frame.SeamModify modify = 12;
inline bool SeamInfo::_internal_has_modify() const {
  return this != internal_default_instance() && modify_ != nullptr;
}
inline bool SeamInfo::has_modify() const {
  return _internal_has_modify();
}
inline void SeamInfo::clear_modify() {
  if (GetArenaNoVirtual() == nullptr && modify_ != nullptr) {
    delete modify_;
  }
  modify_ = nullptr;
}
inline const ::frame::SeamModify& SeamInfo::_internal_modify() const {
  const ::frame::SeamModify* p = modify_;
  return p != nullptr ? *p : *reinterpret_cast<const ::frame::SeamModify*>(
      &::frame::_SeamModify_default_instance_);
}
inline const ::frame::SeamModify& SeamInfo::modify() const {
  // @@protoc_insertion_point(field_get:frame.SeamInfo.modify)
  return _internal_modify();
}
inline ::frame::SeamModify* SeamInfo::release_modify() {
  // @@protoc_insertion_point(field_release:frame.SeamInfo.modify)
  
  ::frame::SeamModify* temp = modify_;
  modify_ = nullptr;
  return temp;
}
inline ::frame::SeamModify* SeamInfo::_internal_mutable_modify() {
  
  if (modify_ == nullptr) {
    auto* p = CreateMaybeMessage<::frame::SeamModify>(GetArenaNoVirtual());
    modify_ = p;
  }
  return modify_;
}
inline ::frame::SeamModify* SeamInfo::mutable_modify() {
  // @@protoc_insertion_point(field_mutable:frame.SeamInfo.modify)
  return _internal_mutable_modify();
}
inline void SeamInfo::set_allocated_modify(::frame::SeamModify* modify) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete modify_;
  }
  if (modify) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      modify = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, modify, submessage_arena);
    }
    
  } else {
    
  }
  modify_ = modify;
  // @@protoc_insertion_point(field_set_allocated:frame.SeamInfo.modify)
}

// -------------------------------------------------------------------

// Frame

// repeated .frame.SeamInfo seams = 1;
inline int Frame::_internal_seams_size() const {
  return seams_.size();
}
inline int Frame::seams_size() const {
  return _internal_seams_size();
}
inline void Frame::clear_seams() {
  seams_.Clear();
}
inline ::frame::SeamInfo* Frame::mutable_seams(int index) {
  // @@protoc_insertion_point(field_mutable:frame.Frame.seams)
  return seams_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::SeamInfo >*
Frame::mutable_seams() {
  // @@protoc_insertion_point(field_mutable_list:frame.Frame.seams)
  return &seams_;
}
inline const ::frame::SeamInfo& Frame::_internal_seams(int index) const {
  return seams_.Get(index);
}
inline const ::frame::SeamInfo& Frame::seams(int index) const {
  // @@protoc_insertion_point(field_get:frame.Frame.seams)
  return _internal_seams(index);
}
inline ::frame::SeamInfo* Frame::_internal_add_seams() {
  return seams_.Add();
}
inline ::frame::SeamInfo* Frame::add_seams() {
  // @@protoc_insertion_point(field_add:frame.Frame.seams)
  return _internal_add_seams();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::SeamInfo >&
Frame::seams() const {
  // @@protoc_insertion_point(field_list:frame.Frame.seams)
  return seams_;
}

// repeated .frame.Cad cad = 2;
inline int Frame::_internal_cad_size() const {
  return cad_.size();
}
inline int Frame::cad_size() const {
  return _internal_cad_size();
}
inline void Frame::clear_cad() {
  cad_.Clear();
}
inline ::frame::Cad* Frame::mutable_cad(int index) {
  // @@protoc_insertion_point(field_mutable:frame.Frame.cad)
  return cad_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::Cad >*
Frame::mutable_cad() {
  // @@protoc_insertion_point(field_mutable_list:frame.Frame.cad)
  return &cad_;
}
inline const ::frame::Cad& Frame::_internal_cad(int index) const {
  return cad_.Get(index);
}
inline const ::frame::Cad& Frame::cad(int index) const {
  // @@protoc_insertion_point(field_get:frame.Frame.cad)
  return _internal_cad(index);
}
inline ::frame::Cad* Frame::_internal_add_cad() {
  return cad_.Add();
}
inline ::frame::Cad* Frame::add_cad() {
  // @@protoc_insertion_point(field_add:frame.Frame.cad)
  return _internal_add_cad();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::frame::Cad >&
Frame::cad() const {
  // @@protoc_insertion_point(field_list:frame.Frame.cad)
  return cad_;
}

// string date = 3;
inline void Frame::clear_date() {
  date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Frame::date() const {
  // @@protoc_insertion_point(field_get:frame.Frame.date)
  return _internal_date();
}
inline void Frame::set_date(const std::string& value) {
  _internal_set_date(value);
  // @@protoc_insertion_point(field_set:frame.Frame.date)
}
inline std::string* Frame::mutable_date() {
  // @@protoc_insertion_point(field_mutable:frame.Frame.date)
  return _internal_mutable_date();
}
inline const std::string& Frame::_internal_date() const {
  return date_.GetNoArena();
}
inline void Frame::_internal_set_date(const std::string& value) {
  
  date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Frame::set_date(std::string&& value) {
  
  date_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:frame.Frame.date)
}
inline void Frame::set_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:frame.Frame.date)
}
inline void Frame::set_date(const char* value, size_t size) {
  
  date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:frame.Frame.date)
}
inline std::string* Frame::_internal_mutable_date() {
  
  return date_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Frame::release_date() {
  // @@protoc_insertion_point(field_release:frame.Frame.date)
  
  return date_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Frame::set_allocated_date(std::string* date) {
  if (date != nullptr) {
    
  } else {
    
  }
  date_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:frame.Frame.date)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace frame

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Frame_2eproto
