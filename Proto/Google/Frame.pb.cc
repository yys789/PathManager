// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Frame.proto

#include "Frame.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Frame_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AFramePos_Frame_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Frame_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AScanePos_Frame_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Frame_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Cad_Frame_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Frame_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Machine_Frame_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Frame_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pos_Frame_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Frame_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_SeamInfo_Frame_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Frame_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SeamModify_Frame_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Frame_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SeamRelate_Frame_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Frame_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SeamWeldInfo_Frame_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Frame_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WeldParament_Frame_2eproto;
namespace frame {
class PosDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Pos> _instance;
} _Pos_default_instance_;
class AScanePosDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AScanePos> _instance;
} _AScanePos_default_instance_;
class AFramePosDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AFramePos> _instance;
} _AFramePos_default_instance_;
class SeamRelateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SeamRelate> _instance;
} _SeamRelate_default_instance_;
class SeamWeldInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SeamWeldInfo> _instance;
} _SeamWeldInfo_default_instance_;
class WeldParamentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WeldParament> _instance;
} _WeldParament_default_instance_;
class CadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Cad> _instance;
} _Cad_default_instance_;
class MachineDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Machine> _instance;
} _Machine_default_instance_;
class SeamModifyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SeamModify> _instance;
} _SeamModify_default_instance_;
class SeamInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SeamInfo> _instance;
} _SeamInfo_default_instance_;
class FrameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Frame> _instance;
} _Frame_default_instance_;
}  // namespace frame
static void InitDefaultsscc_info_AFramePos_Frame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::frame::_AFramePos_default_instance_;
    new (ptr) ::frame::AFramePos();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frame::AFramePos::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AFramePos_Frame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AFramePos_Frame_2eproto}, {
      &scc_info_Pos_Frame_2eproto.base,}};

static void InitDefaultsscc_info_AScanePos_Frame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::frame::_AScanePos_default_instance_;
    new (ptr) ::frame::AScanePos();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frame::AScanePos::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AScanePos_Frame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AScanePos_Frame_2eproto}, {
      &scc_info_Pos_Frame_2eproto.base,}};

static void InitDefaultsscc_info_Cad_Frame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::frame::_Cad_default_instance_;
    new (ptr) ::frame::Cad();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frame::Cad::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Cad_Frame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Cad_Frame_2eproto}, {
      &scc_info_Pos_Frame_2eproto.base,}};

static void InitDefaultsscc_info_Frame_Frame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::frame::_Frame_default_instance_;
    new (ptr) ::frame::Frame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frame::Frame::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Frame_Frame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Frame_Frame_2eproto}, {
      &scc_info_SeamInfo_Frame_2eproto.base,
      &scc_info_Cad_Frame_2eproto.base,}};

static void InitDefaultsscc_info_Machine_Frame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::frame::_Machine_default_instance_;
    new (ptr) ::frame::Machine();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frame::Machine::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Machine_Frame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Machine_Frame_2eproto}, {}};

static void InitDefaultsscc_info_Pos_Frame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::frame::_Pos_default_instance_;
    new (ptr) ::frame::Pos();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frame::Pos::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pos_Frame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Pos_Frame_2eproto}, {}};

static void InitDefaultsscc_info_SeamInfo_Frame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::frame::_SeamInfo_default_instance_;
    new (ptr) ::frame::SeamInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frame::SeamInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_SeamInfo_Frame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_SeamInfo_Frame_2eproto}, {
      &scc_info_AFramePos_Frame_2eproto.base,
      &scc_info_AScanePos_Frame_2eproto.base,
      &scc_info_SeamRelate_Frame_2eproto.base,
      &scc_info_SeamWeldInfo_Frame_2eproto.base,
      &scc_info_WeldParament_Frame_2eproto.base,
      &scc_info_Machine_Frame_2eproto.base,
      &scc_info_SeamModify_Frame_2eproto.base,}};

static void InitDefaultsscc_info_SeamModify_Frame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::frame::_SeamModify_default_instance_;
    new (ptr) ::frame::SeamModify();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frame::SeamModify::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SeamModify_Frame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SeamModify_Frame_2eproto}, {}};

static void InitDefaultsscc_info_SeamRelate_Frame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::frame::_SeamRelate_default_instance_;
    new (ptr) ::frame::SeamRelate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frame::SeamRelate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SeamRelate_Frame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SeamRelate_Frame_2eproto}, {}};

static void InitDefaultsscc_info_SeamWeldInfo_Frame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::frame::_SeamWeldInfo_default_instance_;
    new (ptr) ::frame::SeamWeldInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frame::SeamWeldInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SeamWeldInfo_Frame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SeamWeldInfo_Frame_2eproto}, {
      &scc_info_Pos_Frame_2eproto.base,}};

static void InitDefaultsscc_info_WeldParament_Frame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::frame::_WeldParament_default_instance_;
    new (ptr) ::frame::WeldParament();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frame::WeldParament::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WeldParament_Frame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WeldParament_Frame_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Frame_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Frame_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Frame_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Frame_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frame::Pos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frame::Pos, x_),
  PROTOBUF_FIELD_OFFSET(::frame::Pos, y_),
  PROTOBUF_FIELD_OFFSET(::frame::Pos, z_),
  PROTOBUF_FIELD_OFFSET(::frame::Pos, a_),
  PROTOBUF_FIELD_OFFSET(::frame::Pos, b_),
  PROTOBUF_FIELD_OFFSET(::frame::Pos, c_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frame::AScanePos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frame::AScanePos, pos_),
  PROTOBUF_FIELD_OFFSET(::frame::AScanePos, camera_),
  PROTOBUF_FIELD_OFFSET(::frame::AScanePos, enabled_),
  PROTOBUF_FIELD_OFFSET(::frame::AScanePos, index1_),
  PROTOBUF_FIELD_OFFSET(::frame::AScanePos, angle1_),
  PROTOBUF_FIELD_OFFSET(::frame::AScanePos, angle2_),
  PROTOBUF_FIELD_OFFSET(::frame::AScanePos, angle3_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frame::AFramePos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frame::AFramePos, pos_),
  PROTOBUF_FIELD_OFFSET(::frame::AFramePos, weld_),
  PROTOBUF_FIELD_OFFSET(::frame::AFramePos, height_),
  PROTOBUF_FIELD_OFFSET(::frame::AFramePos, enabled_),
  PROTOBUF_FIELD_OFFSET(::frame::AFramePos, index1_),
  PROTOBUF_FIELD_OFFSET(::frame::AFramePos, angle1_),
  PROTOBUF_FIELD_OFFSET(::frame::AFramePos, angle2_),
  PROTOBUF_FIELD_OFFSET(::frame::AFramePos, angle3_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frame::SeamRelate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frame::SeamRelate, spacing1_),
  PROTOBUF_FIELD_OFFSET(::frame::SeamRelate, distance1_),
  PROTOBUF_FIELD_OFFSET(::frame::SeamRelate, spacing2_),
  PROTOBUF_FIELD_OFFSET(::frame::SeamRelate, distance2_),
  PROTOBUF_FIELD_OFFSET(::frame::SeamRelate, bind1_),
  PROTOBUF_FIELD_OFFSET(::frame::SeamRelate, bind2_),
  PROTOBUF_FIELD_OFFSET(::frame::SeamRelate, seflag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frame::SeamWeldInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frame::SeamWeldInfo, weldorder_),
  PROTOBUF_FIELD_OFFSET(::frame::SeamWeldInfo, offset_),
  PROTOBUF_FIELD_OFFSET(::frame::SeamWeldInfo, baseoffset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frame::WeldParament, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frame::WeldParament, s_w_),
  PROTOBUF_FIELD_OFFSET(::frame::WeldParament, i_w_),
  PROTOBUF_FIELD_OFFSET(::frame::WeldParament, v_w_),
  PROTOBUF_FIELD_OFFSET(::frame::WeldParament, t_end_),
  PROTOBUF_FIELD_OFFSET(::frame::WeldParament, i_end_),
  PROTOBUF_FIELD_OFFSET(::frame::WeldParament, v_end_),
  PROTOBUF_FIELD_OFFSET(::frame::WeldParament, range_),
  PROTOBUF_FIELD_OFFSET(::frame::WeldParament, axis_x_),
  PROTOBUF_FIELD_OFFSET(::frame::WeldParament, axis_y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frame::Cad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frame::Cad, cadid_),
  PROTOBUF_FIELD_OFFSET(::frame::Cad, cadmidpoint_),
  PROTOBUF_FIELD_OFFSET(::frame::Cad, cadbasepos_),
  PROTOBUF_FIELD_OFFSET(::frame::Cad, safeangle1_),
  PROTOBUF_FIELD_OFFSET(::frame::Cad, safeloc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frame::Machine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frame::Machine, pos_motor_start_),
  PROTOBUF_FIELD_OFFSET(::frame::Machine, pos_motor_stop_),
  PROTOBUF_FIELD_OFFSET(::frame::Machine, angle1_motor_start_),
  PROTOBUF_FIELD_OFFSET(::frame::Machine, angle1_motor_stop_),
  PROTOBUF_FIELD_OFFSET(::frame::Machine, angle2_motor_start_),
  PROTOBUF_FIELD_OFFSET(::frame::Machine, angle2_motor_stop_),
  PROTOBUF_FIELD_OFFSET(::frame::Machine, motor1speed_),
  PROTOBUF_FIELD_OFFSET(::frame::Machine, motor2speed_),
  PROTOBUF_FIELD_OFFSET(::frame::Machine, motor3speed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frame::SeamModify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frame::SeamModify, main_),
  PROTOBUF_FIELD_OFFSET(::frame::SeamModify, rank_),
  PROTOBUF_FIELD_OFFSET(::frame::SeamModify, seamtype_),
  PROTOBUF_FIELD_OFFSET(::frame::SeamModify, departlen_),
  PROTOBUF_FIELD_OFFSET(::frame::SeamModify, midpoint_),
  PROTOBUF_FIELD_OFFSET(::frame::SeamModify, middlestart_),
  PROTOBUF_FIELD_OFFSET(::frame::SeamModify, option1_),
  PROTOBUF_FIELD_OFFSET(::frame::SeamModify, autofit_),
  PROTOBUF_FIELD_OFFSET(::frame::SeamModify, tracing_),
  PROTOBUF_FIELD_OFFSET(::frame::SeamModify, width_),
  PROTOBUF_FIELD_OFFSET(::frame::SeamModify, height_),
  PROTOBUF_FIELD_OFFSET(::frame::SeamModify, cornerlen_),
  PROTOBUF_FIELD_OFFSET(::frame::SeamModify, cornerangle_),
  PROTOBUF_FIELD_OFFSET(::frame::SeamModify, enabled_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frame::SeamInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frame::SeamInfo, framepos_),
  PROTOBUF_FIELD_OFFSET(::frame::SeamInfo, scanepos_),
  PROTOBUF_FIELD_OFFSET(::frame::SeamInfo, relate_),
  PROTOBUF_FIELD_OFFSET(::frame::SeamInfo, weldinfo_),
  PROTOBUF_FIELD_OFFSET(::frame::SeamInfo, weldpara_),
  PROTOBUF_FIELD_OFFSET(::frame::SeamInfo, seamname_),
  PROTOBUF_FIELD_OFFSET(::frame::SeamInfo, seamid_),
  PROTOBUF_FIELD_OFFSET(::frame::SeamInfo, orderindex_),
  PROTOBUF_FIELD_OFFSET(::frame::SeamInfo, seamindex_),
  PROTOBUF_FIELD_OFFSET(::frame::SeamInfo, cadid_),
  PROTOBUF_FIELD_OFFSET(::frame::SeamInfo, machine_),
  PROTOBUF_FIELD_OFFSET(::frame::SeamInfo, modify_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frame::Frame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frame::Frame, seams_),
  PROTOBUF_FIELD_OFFSET(::frame::Frame, cad_),
  PROTOBUF_FIELD_OFFSET(::frame::Frame, date_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::frame::Pos)},
  { 11, -1, sizeof(::frame::AScanePos)},
  { 23, -1, sizeof(::frame::AFramePos)},
  { 36, -1, sizeof(::frame::SeamRelate)},
  { 48, -1, sizeof(::frame::SeamWeldInfo)},
  { 56, -1, sizeof(::frame::WeldParament)},
  { 70, -1, sizeof(::frame::Cad)},
  { 80, -1, sizeof(::frame::Machine)},
  { 94, -1, sizeof(::frame::SeamModify)},
  { 113, -1, sizeof(::frame::SeamInfo)},
  { 130, -1, sizeof(::frame::Frame)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frame::_Pos_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frame::_AScanePos_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frame::_AFramePos_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frame::_SeamRelate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frame::_SeamWeldInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frame::_WeldParament_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frame::_Cad_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frame::_Machine_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frame::_SeamModify_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frame::_SeamInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frame::_Frame_default_instance_),
};

const char descriptor_table_protodef_Frame_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013Frame.proto\022\005frame\"G\n\003Pos\022\t\n\001x\030\001 \001(\001\022\t"
  "\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\022\t\n\001a\030\004 \001(\001\022\t\n\001b\030\005 \001"
  "(\001\022\t\n\001c\030\006 \001(\001\"\205\001\n\tAScanePos\022\027\n\003pos\030\001 \001(\013"
  "2\n.frame.Pos\022\016\n\006camera\030\002 \001(\005\022\017\n\007enabled\030"
  "\003 \001(\005\022\016\n\006index1\030\004 \001(\005\022\016\n\006angle1\030\005 \001(\001\022\016\n"
  "\006angle2\030\006 \001(\001\022\016\n\006angle3\030\007 \001(\001\"\223\001\n\tAFrame"
  "Pos\022\027\n\003pos\030\001 \001(\0132\n.frame.Pos\022\014\n\004weld\030\002 \001"
  "(\005\022\016\n\006height\030\003 \001(\005\022\017\n\007enabled\030\004 \001(\005\022\016\n\006i"
  "ndex1\030\005 \001(\005\022\016\n\006angle1\030\006 \001(\001\022\016\n\006angle2\030\007 "
  "\001(\001\022\016\n\006angle3\030\010 \001(\001\"\204\001\n\nSeamRelate\022\020\n\010sp"
  "acing1\030\001 \001(\001\022\021\n\tdistance1\030\002 \001(\001\022\020\n\010spaci"
  "ng2\030\003 \001(\001\022\021\n\tdistance2\030\004 \001(\001\022\r\n\005bind1\030\005 "
  "\001(\005\022\r\n\005bind2\030\006 \001(\005\022\016\n\006seFlag\030\007 \001(\005\"]\n\014Se"
  "amWeldInfo\022\021\n\tweldorder\030\001 \001(\005\022\032\n\006offset\030"
  "\002 \001(\0132\n.frame.Pos\022\036\n\nbaseoffset\030\003 \001(\0132\n."
  "frame.Pos\"\221\001\n\014WeldParament\022\013\n\003s_w\030\001 \001(\005\022"
  "\013\n\003i_w\030\002 \001(\005\022\013\n\003v_w\030\003 \001(\005\022\r\n\005t_end\030\004 \001(\005"
  "\022\r\n\005i_end\030\005 \001(\005\022\r\n\005v_end\030\006 \001(\005\022\r\n\005range\030"
  "\007 \001(\005\022\016\n\006axis_x\030\010 \001(\005\022\016\n\006axis_y\030\t \001(\005\"n\n"
  "\003Cad\022\r\n\005cadid\030\001 \001(\t\022\023\n\013cadMidPoint\030\002 \001(\005"
  "\022\036\n\ncadBasePos\030\003 \001(\0132\n.frame.Pos\022\022\n\nsafe"
  "Angle1\030\004 \001(\001\022\017\n\007safeLoc\030\005 \001(\005\"\347\001\n\007Machin"
  "e\022\027\n\017pos_motor_start\030\001 \001(\001\022\026\n\016pos_motor_"
  "stop\030\002 \001(\001\022\032\n\022angle1_motor_start\030\003 \001(\001\022\031"
  "\n\021angle1_motor_stop\030\004 \001(\001\022\032\n\022angle2_moto"
  "r_start\030\005 \001(\001\022\031\n\021angle2_motor_stop\030\006 \001(\001"
  "\022\023\n\013motor1speed\030\007 \001(\001\022\023\n\013motor2speed\030\010 \001"
  "(\001\022\023\n\013motor3speed\030\t \001(\001\"\377\001\n\nSeamModify\022\014"
  "\n\004main\030\001 \001(\005\022\014\n\004rank\030\002 \001(\005\022\020\n\010seamType\030\003"
  " \001(\t\022\021\n\tDEPARTLEN\030\004 \001(\001\022\020\n\010midPoint\030\005 \001("
  "\005\022\023\n\013MIDDLESTART\030\006 \001(\005\022\017\n\007option1\030\007 \001(\t\022"
  "\017\n\007autoFit\030\010 \001(\005\022\017\n\007tracing\030\t \001(\005\022\r\n\005wid"
  "th\030\n \001(\001\022\016\n\006height\030\013 \001(\001\022\021\n\tCORNERLEN\030\014 "
  "\001(\005\022\023\n\013CORNERANGLE\030\r \001(\005\022\017\n\007enabled\030\016 \001("
  "\005\"\337\002\n\010SeamInfo\022\"\n\010framePos\030\001 \003(\0132\020.frame"
  ".AFramePos\022\"\n\010scanePos\030\002 \003(\0132\020.frame.ASc"
  "anePos\022!\n\006relate\030\003 \001(\0132\021.frame.SeamRelat"
  "e\022%\n\010weldinfo\030\004 \001(\0132\023.frame.SeamWeldInfo"
  "\022%\n\010weldPara\030\005 \001(\0132\023.frame.WeldParament\022"
  "\020\n\010seamName\030\006 \001(\t\022\016\n\006seamID\030\007 \001(\005\022\022\n\nord"
  "erIndex\030\010 \001(\005\022\021\n\tseamIndex\030\t \001(\005\022\r\n\005cadi"
  "d\030\n \001(\t\022\037\n\007machine\030\013 \001(\0132\016.frame.Machine"
  "\022!\n\006modify\030\014 \001(\0132\021.frame.SeamModify\"N\n\005F"
  "rame\022\036\n\005seams\030\001 \003(\0132\017.frame.SeamInfo\022\027\n\003"
  "cad\030\002 \003(\0132\n.frame.Cad\022\014\n\004date\030\003 \001(\tb\006pro"
  "to3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Frame_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Frame_2eproto_sccs[11] = {
  &scc_info_AFramePos_Frame_2eproto.base,
  &scc_info_AScanePos_Frame_2eproto.base,
  &scc_info_Cad_Frame_2eproto.base,
  &scc_info_Frame_Frame_2eproto.base,
  &scc_info_Machine_Frame_2eproto.base,
  &scc_info_Pos_Frame_2eproto.base,
  &scc_info_SeamInfo_Frame_2eproto.base,
  &scc_info_SeamModify_Frame_2eproto.base,
  &scc_info_SeamRelate_Frame_2eproto.base,
  &scc_info_SeamWeldInfo_Frame_2eproto.base,
  &scc_info_WeldParament_Frame_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Frame_2eproto_once;
static bool descriptor_table_Frame_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Frame_2eproto = {
  &descriptor_table_Frame_2eproto_initialized, descriptor_table_protodef_Frame_2eproto, "Frame.proto", 1803,
  &descriptor_table_Frame_2eproto_once, descriptor_table_Frame_2eproto_sccs, descriptor_table_Frame_2eproto_deps, 11, 0,
  schemas, file_default_instances, TableStruct_Frame_2eproto::offsets,
  file_level_metadata_Frame_2eproto, 11, file_level_enum_descriptors_Frame_2eproto, file_level_service_descriptors_Frame_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Frame_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Frame_2eproto), true);
namespace frame {

// ===================================================================

void Pos::InitAsDefaultInstance() {
}
class Pos::_Internal {
 public:
};

Pos::Pos()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:frame.Pos)
}
Pos::Pos(const Pos& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&c_) -
    reinterpret_cast<char*>(&x_)) + sizeof(c_));
  // @@protoc_insertion_point(copy_constructor:frame.Pos)
}

void Pos::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&c_) -
      reinterpret_cast<char*>(&x_)) + sizeof(c_));
}

Pos::~Pos() {
  // @@protoc_insertion_point(destructor:frame.Pos)
  SharedDtor();
}

void Pos::SharedDtor() {
}

void Pos::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Pos& Pos::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Pos_Frame_2eproto.base);
  return *internal_default_instance();
}


void Pos::Clear() {
// @@protoc_insertion_point(message_clear_start:frame.Pos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&c_) -
      reinterpret_cast<char*>(&x_)) + sizeof(c_));
  _internal_metadata_.Clear();
}

const char* Pos::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double a = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double b = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          b_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double c = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          c_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pos::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frame.Pos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  // double a = 4;
  if (!(this->a() <= 0 && this->a() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_a(), target);
  }

  // double b = 5;
  if (!(this->b() <= 0 && this->b() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_b(), target);
  }

  // double c = 6;
  if (!(this->c() <= 0 && this->c() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_c(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frame.Pos)
  return target;
}

size_t Pos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frame.Pos)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 8;
  }

  // double a = 4;
  if (!(this->a() <= 0 && this->a() >= 0)) {
    total_size += 1 + 8;
  }

  // double b = 5;
  if (!(this->b() <= 0 && this->b() >= 0)) {
    total_size += 1 + 8;
  }

  // double c = 6;
  if (!(this->c() <= 0 && this->c() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pos::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frame.Pos)
  GOOGLE_DCHECK_NE(&from, this);
  const Pos* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Pos>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frame.Pos)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frame.Pos)
    MergeFrom(*source);
  }
}

void Pos::MergeFrom(const Pos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frame.Pos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
  if (!(from.a() <= 0 && from.a() >= 0)) {
    _internal_set_a(from._internal_a());
  }
  if (!(from.b() <= 0 && from.b() >= 0)) {
    _internal_set_b(from._internal_b());
  }
  if (!(from.c() <= 0 && from.c() >= 0)) {
    _internal_set_c(from._internal_c());
  }
}

void Pos::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frame.Pos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pos::CopyFrom(const Pos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frame.Pos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pos::IsInitialized() const {
  return true;
}

void Pos::InternalSwap(Pos* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(a_, other->a_);
  swap(b_, other->b_);
  swap(c_, other->c_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Pos::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AScanePos::InitAsDefaultInstance() {
  ::frame::_AScanePos_default_instance_._instance.get_mutable()->pos_ = const_cast< ::frame::Pos*>(
      ::frame::Pos::internal_default_instance());
}
class AScanePos::_Internal {
 public:
  static const ::frame::Pos& pos(const AScanePos* msg);
};

const ::frame::Pos&
AScanePos::_Internal::pos(const AScanePos* msg) {
  return *msg->pos_;
}
AScanePos::AScanePos()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:frame.AScanePos)
}
AScanePos::AScanePos(const AScanePos& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_pos()) {
    pos_ = new ::frame::Pos(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  ::memcpy(&camera_, &from.camera_,
    static_cast<size_t>(reinterpret_cast<char*>(&index1_) -
    reinterpret_cast<char*>(&camera_)) + sizeof(index1_));
  // @@protoc_insertion_point(copy_constructor:frame.AScanePos)
}

void AScanePos::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AScanePos_Frame_2eproto.base);
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index1_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(index1_));
}

AScanePos::~AScanePos() {
  // @@protoc_insertion_point(destructor:frame.AScanePos)
  SharedDtor();
}

void AScanePos::SharedDtor() {
  if (this != internal_default_instance()) delete pos_;
}

void AScanePos::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AScanePos& AScanePos::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AScanePos_Frame_2eproto.base);
  return *internal_default_instance();
}


void AScanePos::Clear() {
// @@protoc_insertion_point(message_clear_start:frame.AScanePos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
  ::memset(&camera_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index1_) -
      reinterpret_cast<char*>(&camera_)) + sizeof(index1_));
  _internal_metadata_.Clear();
}

const char* AScanePos::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .frame.Pos pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 camera = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          camera_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 enabled = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 index1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          index1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double angle1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          angle1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double angle2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          angle2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double angle3 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          angle3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AScanePos::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frame.AScanePos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .frame.Pos pos = 1;
  if (this->has_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pos(this), target, stream);
  }

  // int32 camera = 2;
  if (this->camera() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_camera(), target);
  }

  // int32 enabled = 3;
  if (this->enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_enabled(), target);
  }

  // int32 index1 = 4;
  if (this->index1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_index1(), target);
  }

  // double angle1 = 5;
  if (!(this->angle1() <= 0 && this->angle1() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_angle1(), target);
  }

  // double angle2 = 6;
  if (!(this->angle2() <= 0 && this->angle2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_angle2(), target);
  }

  // double angle3 = 7;
  if (!(this->angle3() <= 0 && this->angle3() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_angle3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frame.AScanePos)
  return target;
}

size_t AScanePos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frame.AScanePos)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .frame.Pos pos = 1;
  if (this->has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // int32 camera = 2;
  if (this->camera() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_camera());
  }

  // int32 enabled = 3;
  if (this->enabled() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_enabled());
  }

  // double angle1 = 5;
  if (!(this->angle1() <= 0 && this->angle1() >= 0)) {
    total_size += 1 + 8;
  }

  // double angle2 = 6;
  if (!(this->angle2() <= 0 && this->angle2() >= 0)) {
    total_size += 1 + 8;
  }

  // double angle3 = 7;
  if (!(this->angle3() <= 0 && this->angle3() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 index1 = 4;
  if (this->index1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index1());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AScanePos::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frame.AScanePos)
  GOOGLE_DCHECK_NE(&from, this);
  const AScanePos* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AScanePos>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frame.AScanePos)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frame.AScanePos)
    MergeFrom(*source);
  }
}

void AScanePos::MergeFrom(const AScanePos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frame.AScanePos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pos()) {
    _internal_mutable_pos()->::frame::Pos::MergeFrom(from._internal_pos());
  }
  if (from.camera() != 0) {
    _internal_set_camera(from._internal_camera());
  }
  if (from.enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
  if (!(from.angle1() <= 0 && from.angle1() >= 0)) {
    _internal_set_angle1(from._internal_angle1());
  }
  if (!(from.angle2() <= 0 && from.angle2() >= 0)) {
    _internal_set_angle2(from._internal_angle2());
  }
  if (!(from.angle3() <= 0 && from.angle3() >= 0)) {
    _internal_set_angle3(from._internal_angle3());
  }
  if (from.index1() != 0) {
    _internal_set_index1(from._internal_index1());
  }
}

void AScanePos::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frame.AScanePos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AScanePos::CopyFrom(const AScanePos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frame.AScanePos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AScanePos::IsInitialized() const {
  return true;
}

void AScanePos::InternalSwap(AScanePos* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(pos_, other->pos_);
  swap(camera_, other->camera_);
  swap(enabled_, other->enabled_);
  swap(angle1_, other->angle1_);
  swap(angle2_, other->angle2_);
  swap(angle3_, other->angle3_);
  swap(index1_, other->index1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AScanePos::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AFramePos::InitAsDefaultInstance() {
  ::frame::_AFramePos_default_instance_._instance.get_mutable()->pos_ = const_cast< ::frame::Pos*>(
      ::frame::Pos::internal_default_instance());
}
class AFramePos::_Internal {
 public:
  static const ::frame::Pos& pos(const AFramePos* msg);
};

const ::frame::Pos&
AFramePos::_Internal::pos(const AFramePos* msg) {
  return *msg->pos_;
}
AFramePos::AFramePos()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:frame.AFramePos)
}
AFramePos::AFramePos(const AFramePos& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_pos()) {
    pos_ = new ::frame::Pos(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  ::memcpy(&weld_, &from.weld_,
    static_cast<size_t>(reinterpret_cast<char*>(&angle3_) -
    reinterpret_cast<char*>(&weld_)) + sizeof(angle3_));
  // @@protoc_insertion_point(copy_constructor:frame.AFramePos)
}

void AFramePos::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AFramePos_Frame_2eproto.base);
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angle3_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(angle3_));
}

AFramePos::~AFramePos() {
  // @@protoc_insertion_point(destructor:frame.AFramePos)
  SharedDtor();
}

void AFramePos::SharedDtor() {
  if (this != internal_default_instance()) delete pos_;
}

void AFramePos::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AFramePos& AFramePos::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AFramePos_Frame_2eproto.base);
  return *internal_default_instance();
}


void AFramePos::Clear() {
// @@protoc_insertion_point(message_clear_start:frame.AFramePos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
  ::memset(&weld_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angle3_) -
      reinterpret_cast<char*>(&weld_)) + sizeof(angle3_));
  _internal_metadata_.Clear();
}

const char* AFramePos::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .frame.Pos pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 weld = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          weld_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 enabled = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 index1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          index1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double angle1 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          angle1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double angle2 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          angle2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double angle3 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          angle3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AFramePos::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frame.AFramePos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .frame.Pos pos = 1;
  if (this->has_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pos(this), target, stream);
  }

  // int32 weld = 2;
  if (this->weld() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_weld(), target);
  }

  // int32 height = 3;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_height(), target);
  }

  // int32 enabled = 4;
  if (this->enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_enabled(), target);
  }

  // int32 index1 = 5;
  if (this->index1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_index1(), target);
  }

  // double angle1 = 6;
  if (!(this->angle1() <= 0 && this->angle1() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_angle1(), target);
  }

  // double angle2 = 7;
  if (!(this->angle2() <= 0 && this->angle2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_angle2(), target);
  }

  // double angle3 = 8;
  if (!(this->angle3() <= 0 && this->angle3() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_angle3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frame.AFramePos)
  return target;
}

size_t AFramePos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frame.AFramePos)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .frame.Pos pos = 1;
  if (this->has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // int32 weld = 2;
  if (this->weld() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_weld());
  }

  // int32 height = 3;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());
  }

  // int32 enabled = 4;
  if (this->enabled() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_enabled());
  }

  // int32 index1 = 5;
  if (this->index1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index1());
  }

  // double angle1 = 6;
  if (!(this->angle1() <= 0 && this->angle1() >= 0)) {
    total_size += 1 + 8;
  }

  // double angle2 = 7;
  if (!(this->angle2() <= 0 && this->angle2() >= 0)) {
    total_size += 1 + 8;
  }

  // double angle3 = 8;
  if (!(this->angle3() <= 0 && this->angle3() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AFramePos::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frame.AFramePos)
  GOOGLE_DCHECK_NE(&from, this);
  const AFramePos* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AFramePos>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frame.AFramePos)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frame.AFramePos)
    MergeFrom(*source);
  }
}

void AFramePos::MergeFrom(const AFramePos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frame.AFramePos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pos()) {
    _internal_mutable_pos()->::frame::Pos::MergeFrom(from._internal_pos());
  }
  if (from.weld() != 0) {
    _internal_set_weld(from._internal_weld());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from.enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
  if (from.index1() != 0) {
    _internal_set_index1(from._internal_index1());
  }
  if (!(from.angle1() <= 0 && from.angle1() >= 0)) {
    _internal_set_angle1(from._internal_angle1());
  }
  if (!(from.angle2() <= 0 && from.angle2() >= 0)) {
    _internal_set_angle2(from._internal_angle2());
  }
  if (!(from.angle3() <= 0 && from.angle3() >= 0)) {
    _internal_set_angle3(from._internal_angle3());
  }
}

void AFramePos::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frame.AFramePos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AFramePos::CopyFrom(const AFramePos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frame.AFramePos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AFramePos::IsInitialized() const {
  return true;
}

void AFramePos::InternalSwap(AFramePos* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(pos_, other->pos_);
  swap(weld_, other->weld_);
  swap(height_, other->height_);
  swap(enabled_, other->enabled_);
  swap(index1_, other->index1_);
  swap(angle1_, other->angle1_);
  swap(angle2_, other->angle2_);
  swap(angle3_, other->angle3_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AFramePos::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SeamRelate::InitAsDefaultInstance() {
}
class SeamRelate::_Internal {
 public:
};

SeamRelate::SeamRelate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:frame.SeamRelate)
}
SeamRelate::SeamRelate(const SeamRelate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&spacing1_, &from.spacing1_,
    static_cast<size_t>(reinterpret_cast<char*>(&seflag_) -
    reinterpret_cast<char*>(&spacing1_)) + sizeof(seflag_));
  // @@protoc_insertion_point(copy_constructor:frame.SeamRelate)
}

void SeamRelate::SharedCtor() {
  ::memset(&spacing1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seflag_) -
      reinterpret_cast<char*>(&spacing1_)) + sizeof(seflag_));
}

SeamRelate::~SeamRelate() {
  // @@protoc_insertion_point(destructor:frame.SeamRelate)
  SharedDtor();
}

void SeamRelate::SharedDtor() {
}

void SeamRelate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SeamRelate& SeamRelate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SeamRelate_Frame_2eproto.base);
  return *internal_default_instance();
}


void SeamRelate::Clear() {
// @@protoc_insertion_point(message_clear_start:frame.SeamRelate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&spacing1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seflag_) -
      reinterpret_cast<char*>(&spacing1_)) + sizeof(seflag_));
  _internal_metadata_.Clear();
}

const char* SeamRelate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double spacing1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          spacing1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double distance1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          distance1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double spacing2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          spacing2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double distance2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          distance2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 bind1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          bind1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bind2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          bind2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 seFlag = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          seflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SeamRelate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frame.SeamRelate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double spacing1 = 1;
  if (!(this->spacing1() <= 0 && this->spacing1() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_spacing1(), target);
  }

  // double distance1 = 2;
  if (!(this->distance1() <= 0 && this->distance1() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_distance1(), target);
  }

  // double spacing2 = 3;
  if (!(this->spacing2() <= 0 && this->spacing2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_spacing2(), target);
  }

  // double distance2 = 4;
  if (!(this->distance2() <= 0 && this->distance2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_distance2(), target);
  }

  // int32 bind1 = 5;
  if (this->bind1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_bind1(), target);
  }

  // int32 bind2 = 6;
  if (this->bind2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_bind2(), target);
  }

  // int32 seFlag = 7;
  if (this->seflag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_seflag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frame.SeamRelate)
  return target;
}

size_t SeamRelate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frame.SeamRelate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double spacing1 = 1;
  if (!(this->spacing1() <= 0 && this->spacing1() >= 0)) {
    total_size += 1 + 8;
  }

  // double distance1 = 2;
  if (!(this->distance1() <= 0 && this->distance1() >= 0)) {
    total_size += 1 + 8;
  }

  // double spacing2 = 3;
  if (!(this->spacing2() <= 0 && this->spacing2() >= 0)) {
    total_size += 1 + 8;
  }

  // double distance2 = 4;
  if (!(this->distance2() <= 0 && this->distance2() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 bind1 = 5;
  if (this->bind1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bind1());
  }

  // int32 bind2 = 6;
  if (this->bind2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bind2());
  }

  // int32 seFlag = 7;
  if (this->seflag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_seflag());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SeamRelate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frame.SeamRelate)
  GOOGLE_DCHECK_NE(&from, this);
  const SeamRelate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SeamRelate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frame.SeamRelate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frame.SeamRelate)
    MergeFrom(*source);
  }
}

void SeamRelate::MergeFrom(const SeamRelate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frame.SeamRelate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.spacing1() <= 0 && from.spacing1() >= 0)) {
    _internal_set_spacing1(from._internal_spacing1());
  }
  if (!(from.distance1() <= 0 && from.distance1() >= 0)) {
    _internal_set_distance1(from._internal_distance1());
  }
  if (!(from.spacing2() <= 0 && from.spacing2() >= 0)) {
    _internal_set_spacing2(from._internal_spacing2());
  }
  if (!(from.distance2() <= 0 && from.distance2() >= 0)) {
    _internal_set_distance2(from._internal_distance2());
  }
  if (from.bind1() != 0) {
    _internal_set_bind1(from._internal_bind1());
  }
  if (from.bind2() != 0) {
    _internal_set_bind2(from._internal_bind2());
  }
  if (from.seflag() != 0) {
    _internal_set_seflag(from._internal_seflag());
  }
}

void SeamRelate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frame.SeamRelate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeamRelate::CopyFrom(const SeamRelate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frame.SeamRelate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeamRelate::IsInitialized() const {
  return true;
}

void SeamRelate::InternalSwap(SeamRelate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(spacing1_, other->spacing1_);
  swap(distance1_, other->distance1_);
  swap(spacing2_, other->spacing2_);
  swap(distance2_, other->distance2_);
  swap(bind1_, other->bind1_);
  swap(bind2_, other->bind2_);
  swap(seflag_, other->seflag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SeamRelate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SeamWeldInfo::InitAsDefaultInstance() {
  ::frame::_SeamWeldInfo_default_instance_._instance.get_mutable()->offset_ = const_cast< ::frame::Pos*>(
      ::frame::Pos::internal_default_instance());
  ::frame::_SeamWeldInfo_default_instance_._instance.get_mutable()->baseoffset_ = const_cast< ::frame::Pos*>(
      ::frame::Pos::internal_default_instance());
}
class SeamWeldInfo::_Internal {
 public:
  static const ::frame::Pos& offset(const SeamWeldInfo* msg);
  static const ::frame::Pos& baseoffset(const SeamWeldInfo* msg);
};

const ::frame::Pos&
SeamWeldInfo::_Internal::offset(const SeamWeldInfo* msg) {
  return *msg->offset_;
}
const ::frame::Pos&
SeamWeldInfo::_Internal::baseoffset(const SeamWeldInfo* msg) {
  return *msg->baseoffset_;
}
SeamWeldInfo::SeamWeldInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:frame.SeamWeldInfo)
}
SeamWeldInfo::SeamWeldInfo(const SeamWeldInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_offset()) {
    offset_ = new ::frame::Pos(*from.offset_);
  } else {
    offset_ = nullptr;
  }
  if (from._internal_has_baseoffset()) {
    baseoffset_ = new ::frame::Pos(*from.baseoffset_);
  } else {
    baseoffset_ = nullptr;
  }
  weldorder_ = from.weldorder_;
  // @@protoc_insertion_point(copy_constructor:frame.SeamWeldInfo)
}

void SeamWeldInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SeamWeldInfo_Frame_2eproto.base);
  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weldorder_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(weldorder_));
}

SeamWeldInfo::~SeamWeldInfo() {
  // @@protoc_insertion_point(destructor:frame.SeamWeldInfo)
  SharedDtor();
}

void SeamWeldInfo::SharedDtor() {
  if (this != internal_default_instance()) delete offset_;
  if (this != internal_default_instance()) delete baseoffset_;
}

void SeamWeldInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SeamWeldInfo& SeamWeldInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SeamWeldInfo_Frame_2eproto.base);
  return *internal_default_instance();
}


void SeamWeldInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:frame.SeamWeldInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && offset_ != nullptr) {
    delete offset_;
  }
  offset_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && baseoffset_ != nullptr) {
    delete baseoffset_;
  }
  baseoffset_ = nullptr;
  weldorder_ = 0;
  _internal_metadata_.Clear();
}

const char* SeamWeldInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 weldorder = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          weldorder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .frame.Pos offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_offset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .frame.Pos baseoffset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_baseoffset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SeamWeldInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frame.SeamWeldInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 weldorder = 1;
  if (this->weldorder() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_weldorder(), target);
  }

  // .frame.Pos offset = 2;
  if (this->has_offset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::offset(this), target, stream);
  }

  // .frame.Pos baseoffset = 3;
  if (this->has_baseoffset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::baseoffset(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frame.SeamWeldInfo)
  return target;
}

size_t SeamWeldInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frame.SeamWeldInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .frame.Pos offset = 2;
  if (this->has_offset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *offset_);
  }

  // .frame.Pos baseoffset = 3;
  if (this->has_baseoffset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *baseoffset_);
  }

  // int32 weldorder = 1;
  if (this->weldorder() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_weldorder());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SeamWeldInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frame.SeamWeldInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SeamWeldInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SeamWeldInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frame.SeamWeldInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frame.SeamWeldInfo)
    MergeFrom(*source);
  }
}

void SeamWeldInfo::MergeFrom(const SeamWeldInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frame.SeamWeldInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_offset()) {
    _internal_mutable_offset()->::frame::Pos::MergeFrom(from._internal_offset());
  }
  if (from.has_baseoffset()) {
    _internal_mutable_baseoffset()->::frame::Pos::MergeFrom(from._internal_baseoffset());
  }
  if (from.weldorder() != 0) {
    _internal_set_weldorder(from._internal_weldorder());
  }
}

void SeamWeldInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frame.SeamWeldInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeamWeldInfo::CopyFrom(const SeamWeldInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frame.SeamWeldInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeamWeldInfo::IsInitialized() const {
  return true;
}

void SeamWeldInfo::InternalSwap(SeamWeldInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(offset_, other->offset_);
  swap(baseoffset_, other->baseoffset_);
  swap(weldorder_, other->weldorder_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SeamWeldInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WeldParament::InitAsDefaultInstance() {
}
class WeldParament::_Internal {
 public:
};

WeldParament::WeldParament()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:frame.WeldParament)
}
WeldParament::WeldParament(const WeldParament& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s_w_, &from.s_w_,
    static_cast<size_t>(reinterpret_cast<char*>(&axis_y_) -
    reinterpret_cast<char*>(&s_w_)) + sizeof(axis_y_));
  // @@protoc_insertion_point(copy_constructor:frame.WeldParament)
}

void WeldParament::SharedCtor() {
  ::memset(&s_w_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&axis_y_) -
      reinterpret_cast<char*>(&s_w_)) + sizeof(axis_y_));
}

WeldParament::~WeldParament() {
  // @@protoc_insertion_point(destructor:frame.WeldParament)
  SharedDtor();
}

void WeldParament::SharedDtor() {
}

void WeldParament::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WeldParament& WeldParament::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WeldParament_Frame_2eproto.base);
  return *internal_default_instance();
}


void WeldParament::Clear() {
// @@protoc_insertion_point(message_clear_start:frame.WeldParament)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&s_w_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&axis_y_) -
      reinterpret_cast<char*>(&s_w_)) + sizeof(axis_y_));
  _internal_metadata_.Clear();
}

const char* WeldParament::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 s_w = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          s_w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 i_w = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          i_w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 v_w = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          v_w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 t_end = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          t_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 i_end = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          i_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 v_end = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          v_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 range = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 axis_x = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          axis_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 axis_y = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          axis_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WeldParament::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frame.WeldParament)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 s_w = 1;
  if (this->s_w() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_s_w(), target);
  }

  // int32 i_w = 2;
  if (this->i_w() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_i_w(), target);
  }

  // int32 v_w = 3;
  if (this->v_w() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_v_w(), target);
  }

  // int32 t_end = 4;
  if (this->t_end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_t_end(), target);
  }

  // int32 i_end = 5;
  if (this->i_end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_i_end(), target);
  }

  // int32 v_end = 6;
  if (this->v_end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_v_end(), target);
  }

  // int32 range = 7;
  if (this->range() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_range(), target);
  }

  // int32 axis_x = 8;
  if (this->axis_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_axis_x(), target);
  }

  // int32 axis_y = 9;
  if (this->axis_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_axis_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frame.WeldParament)
  return target;
}

size_t WeldParament::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frame.WeldParament)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 s_w = 1;
  if (this->s_w() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_s_w());
  }

  // int32 i_w = 2;
  if (this->i_w() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_i_w());
  }

  // int32 v_w = 3;
  if (this->v_w() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_v_w());
  }

  // int32 t_end = 4;
  if (this->t_end() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_t_end());
  }

  // int32 i_end = 5;
  if (this->i_end() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_i_end());
  }

  // int32 v_end = 6;
  if (this->v_end() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_v_end());
  }

  // int32 range = 7;
  if (this->range() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_range());
  }

  // int32 axis_x = 8;
  if (this->axis_x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_axis_x());
  }

  // int32 axis_y = 9;
  if (this->axis_y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_axis_y());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WeldParament::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frame.WeldParament)
  GOOGLE_DCHECK_NE(&from, this);
  const WeldParament* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WeldParament>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frame.WeldParament)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frame.WeldParament)
    MergeFrom(*source);
  }
}

void WeldParament::MergeFrom(const WeldParament& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frame.WeldParament)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.s_w() != 0) {
    _internal_set_s_w(from._internal_s_w());
  }
  if (from.i_w() != 0) {
    _internal_set_i_w(from._internal_i_w());
  }
  if (from.v_w() != 0) {
    _internal_set_v_w(from._internal_v_w());
  }
  if (from.t_end() != 0) {
    _internal_set_t_end(from._internal_t_end());
  }
  if (from.i_end() != 0) {
    _internal_set_i_end(from._internal_i_end());
  }
  if (from.v_end() != 0) {
    _internal_set_v_end(from._internal_v_end());
  }
  if (from.range() != 0) {
    _internal_set_range(from._internal_range());
  }
  if (from.axis_x() != 0) {
    _internal_set_axis_x(from._internal_axis_x());
  }
  if (from.axis_y() != 0) {
    _internal_set_axis_y(from._internal_axis_y());
  }
}

void WeldParament::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frame.WeldParament)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeldParament::CopyFrom(const WeldParament& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frame.WeldParament)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeldParament::IsInitialized() const {
  return true;
}

void WeldParament::InternalSwap(WeldParament* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(s_w_, other->s_w_);
  swap(i_w_, other->i_w_);
  swap(v_w_, other->v_w_);
  swap(t_end_, other->t_end_);
  swap(i_end_, other->i_end_);
  swap(v_end_, other->v_end_);
  swap(range_, other->range_);
  swap(axis_x_, other->axis_x_);
  swap(axis_y_, other->axis_y_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WeldParament::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Cad::InitAsDefaultInstance() {
  ::frame::_Cad_default_instance_._instance.get_mutable()->cadbasepos_ = const_cast< ::frame::Pos*>(
      ::frame::Pos::internal_default_instance());
}
class Cad::_Internal {
 public:
  static const ::frame::Pos& cadbasepos(const Cad* msg);
};

const ::frame::Pos&
Cad::_Internal::cadbasepos(const Cad* msg) {
  return *msg->cadbasepos_;
}
Cad::Cad()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:frame.Cad)
}
Cad::Cad(const Cad& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cadid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cadid().empty()) {
    cadid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cadid_);
  }
  if (from._internal_has_cadbasepos()) {
    cadbasepos_ = new ::frame::Pos(*from.cadbasepos_);
  } else {
    cadbasepos_ = nullptr;
  }
  ::memcpy(&cadmidpoint_, &from.cadmidpoint_,
    static_cast<size_t>(reinterpret_cast<char*>(&safeangle1_) -
    reinterpret_cast<char*>(&cadmidpoint_)) + sizeof(safeangle1_));
  // @@protoc_insertion_point(copy_constructor:frame.Cad)
}

void Cad::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Cad_Frame_2eproto.base);
  cadid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&cadbasepos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&safeangle1_) -
      reinterpret_cast<char*>(&cadbasepos_)) + sizeof(safeangle1_));
}

Cad::~Cad() {
  // @@protoc_insertion_point(destructor:frame.Cad)
  SharedDtor();
}

void Cad::SharedDtor() {
  cadid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete cadbasepos_;
}

void Cad::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Cad& Cad::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Cad_Frame_2eproto.base);
  return *internal_default_instance();
}


void Cad::Clear() {
// @@protoc_insertion_point(message_clear_start:frame.Cad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cadid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && cadbasepos_ != nullptr) {
    delete cadbasepos_;
  }
  cadbasepos_ = nullptr;
  ::memset(&cadmidpoint_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&safeangle1_) -
      reinterpret_cast<char*>(&cadmidpoint_)) + sizeof(safeangle1_));
  _internal_metadata_.Clear();
}

const char* Cad::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string cadid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_cadid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frame.Cad.cadid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cadMidPoint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cadmidpoint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .frame.Pos cadBasePos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cadbasepos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double safeAngle1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          safeangle1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 safeLoc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          safeloc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Cad::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frame.Cad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cadid = 1;
  if (this->cadid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cadid().data(), static_cast<int>(this->_internal_cadid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frame.Cad.cadid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cadid(), target);
  }

  // int32 cadMidPoint = 2;
  if (this->cadmidpoint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_cadmidpoint(), target);
  }

  // .frame.Pos cadBasePos = 3;
  if (this->has_cadbasepos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::cadbasepos(this), target, stream);
  }

  // double safeAngle1 = 4;
  if (!(this->safeangle1() <= 0 && this->safeangle1() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_safeangle1(), target);
  }

  // int32 safeLoc = 5;
  if (this->safeloc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_safeloc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frame.Cad)
  return target;
}

size_t Cad::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frame.Cad)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cadid = 1;
  if (this->cadid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cadid());
  }

  // .frame.Pos cadBasePos = 3;
  if (this->has_cadbasepos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cadbasepos_);
  }

  // int32 cadMidPoint = 2;
  if (this->cadmidpoint() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cadmidpoint());
  }

  // int32 safeLoc = 5;
  if (this->safeloc() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_safeloc());
  }

  // double safeAngle1 = 4;
  if (!(this->safeangle1() <= 0 && this->safeangle1() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Cad::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frame.Cad)
  GOOGLE_DCHECK_NE(&from, this);
  const Cad* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Cad>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frame.Cad)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frame.Cad)
    MergeFrom(*source);
  }
}

void Cad::MergeFrom(const Cad& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frame.Cad)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cadid().size() > 0) {

    cadid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cadid_);
  }
  if (from.has_cadbasepos()) {
    _internal_mutable_cadbasepos()->::frame::Pos::MergeFrom(from._internal_cadbasepos());
  }
  if (from.cadmidpoint() != 0) {
    _internal_set_cadmidpoint(from._internal_cadmidpoint());
  }
  if (from.safeloc() != 0) {
    _internal_set_safeloc(from._internal_safeloc());
  }
  if (!(from.safeangle1() <= 0 && from.safeangle1() >= 0)) {
    _internal_set_safeangle1(from._internal_safeangle1());
  }
}

void Cad::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frame.Cad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cad::CopyFrom(const Cad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frame.Cad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cad::IsInitialized() const {
  return true;
}

void Cad::InternalSwap(Cad* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cadid_.Swap(&other->cadid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(cadbasepos_, other->cadbasepos_);
  swap(cadmidpoint_, other->cadmidpoint_);
  swap(safeloc_, other->safeloc_);
  swap(safeangle1_, other->safeangle1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Cad::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Machine::InitAsDefaultInstance() {
}
class Machine::_Internal {
 public:
};

Machine::Machine()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:frame.Machine)
}
Machine::Machine(const Machine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pos_motor_start_, &from.pos_motor_start_,
    static_cast<size_t>(reinterpret_cast<char*>(&motor3speed_) -
    reinterpret_cast<char*>(&pos_motor_start_)) + sizeof(motor3speed_));
  // @@protoc_insertion_point(copy_constructor:frame.Machine)
}

void Machine::SharedCtor() {
  ::memset(&pos_motor_start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&motor3speed_) -
      reinterpret_cast<char*>(&pos_motor_start_)) + sizeof(motor3speed_));
}

Machine::~Machine() {
  // @@protoc_insertion_point(destructor:frame.Machine)
  SharedDtor();
}

void Machine::SharedDtor() {
}

void Machine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Machine& Machine::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Machine_Frame_2eproto.base);
  return *internal_default_instance();
}


void Machine::Clear() {
// @@protoc_insertion_point(message_clear_start:frame.Machine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pos_motor_start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&motor3speed_) -
      reinterpret_cast<char*>(&pos_motor_start_)) + sizeof(motor3speed_));
  _internal_metadata_.Clear();
}

const char* Machine::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double pos_motor_start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          pos_motor_start_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pos_motor_stop = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          pos_motor_stop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double angle1_motor_start = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          angle1_motor_start_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double angle1_motor_stop = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          angle1_motor_stop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double angle2_motor_start = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          angle2_motor_start_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double angle2_motor_stop = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          angle2_motor_stop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double motor1speed = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          motor1speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double motor2speed = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          motor2speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double motor3speed = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          motor3speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Machine::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frame.Machine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double pos_motor_start = 1;
  if (!(this->pos_motor_start() <= 0 && this->pos_motor_start() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_pos_motor_start(), target);
  }

  // double pos_motor_stop = 2;
  if (!(this->pos_motor_stop() <= 0 && this->pos_motor_stop() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_pos_motor_stop(), target);
  }

  // double angle1_motor_start = 3;
  if (!(this->angle1_motor_start() <= 0 && this->angle1_motor_start() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_angle1_motor_start(), target);
  }

  // double angle1_motor_stop = 4;
  if (!(this->angle1_motor_stop() <= 0 && this->angle1_motor_stop() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_angle1_motor_stop(), target);
  }

  // double angle2_motor_start = 5;
  if (!(this->angle2_motor_start() <= 0 && this->angle2_motor_start() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_angle2_motor_start(), target);
  }

  // double angle2_motor_stop = 6;
  if (!(this->angle2_motor_stop() <= 0 && this->angle2_motor_stop() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_angle2_motor_stop(), target);
  }

  // double motor1speed = 7;
  if (!(this->motor1speed() <= 0 && this->motor1speed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_motor1speed(), target);
  }

  // double motor2speed = 8;
  if (!(this->motor2speed() <= 0 && this->motor2speed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_motor2speed(), target);
  }

  // double motor3speed = 9;
  if (!(this->motor3speed() <= 0 && this->motor3speed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_motor3speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frame.Machine)
  return target;
}

size_t Machine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frame.Machine)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double pos_motor_start = 1;
  if (!(this->pos_motor_start() <= 0 && this->pos_motor_start() >= 0)) {
    total_size += 1 + 8;
  }

  // double pos_motor_stop = 2;
  if (!(this->pos_motor_stop() <= 0 && this->pos_motor_stop() >= 0)) {
    total_size += 1 + 8;
  }

  // double angle1_motor_start = 3;
  if (!(this->angle1_motor_start() <= 0 && this->angle1_motor_start() >= 0)) {
    total_size += 1 + 8;
  }

  // double angle1_motor_stop = 4;
  if (!(this->angle1_motor_stop() <= 0 && this->angle1_motor_stop() >= 0)) {
    total_size += 1 + 8;
  }

  // double angle2_motor_start = 5;
  if (!(this->angle2_motor_start() <= 0 && this->angle2_motor_start() >= 0)) {
    total_size += 1 + 8;
  }

  // double angle2_motor_stop = 6;
  if (!(this->angle2_motor_stop() <= 0 && this->angle2_motor_stop() >= 0)) {
    total_size += 1 + 8;
  }

  // double motor1speed = 7;
  if (!(this->motor1speed() <= 0 && this->motor1speed() >= 0)) {
    total_size += 1 + 8;
  }

  // double motor2speed = 8;
  if (!(this->motor2speed() <= 0 && this->motor2speed() >= 0)) {
    total_size += 1 + 8;
  }

  // double motor3speed = 9;
  if (!(this->motor3speed() <= 0 && this->motor3speed() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Machine::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frame.Machine)
  GOOGLE_DCHECK_NE(&from, this);
  const Machine* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Machine>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frame.Machine)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frame.Machine)
    MergeFrom(*source);
  }
}

void Machine::MergeFrom(const Machine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frame.Machine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.pos_motor_start() <= 0 && from.pos_motor_start() >= 0)) {
    _internal_set_pos_motor_start(from._internal_pos_motor_start());
  }
  if (!(from.pos_motor_stop() <= 0 && from.pos_motor_stop() >= 0)) {
    _internal_set_pos_motor_stop(from._internal_pos_motor_stop());
  }
  if (!(from.angle1_motor_start() <= 0 && from.angle1_motor_start() >= 0)) {
    _internal_set_angle1_motor_start(from._internal_angle1_motor_start());
  }
  if (!(from.angle1_motor_stop() <= 0 && from.angle1_motor_stop() >= 0)) {
    _internal_set_angle1_motor_stop(from._internal_angle1_motor_stop());
  }
  if (!(from.angle2_motor_start() <= 0 && from.angle2_motor_start() >= 0)) {
    _internal_set_angle2_motor_start(from._internal_angle2_motor_start());
  }
  if (!(from.angle2_motor_stop() <= 0 && from.angle2_motor_stop() >= 0)) {
    _internal_set_angle2_motor_stop(from._internal_angle2_motor_stop());
  }
  if (!(from.motor1speed() <= 0 && from.motor1speed() >= 0)) {
    _internal_set_motor1speed(from._internal_motor1speed());
  }
  if (!(from.motor2speed() <= 0 && from.motor2speed() >= 0)) {
    _internal_set_motor2speed(from._internal_motor2speed());
  }
  if (!(from.motor3speed() <= 0 && from.motor3speed() >= 0)) {
    _internal_set_motor3speed(from._internal_motor3speed());
  }
}

void Machine::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frame.Machine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Machine::CopyFrom(const Machine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frame.Machine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Machine::IsInitialized() const {
  return true;
}

void Machine::InternalSwap(Machine* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(pos_motor_start_, other->pos_motor_start_);
  swap(pos_motor_stop_, other->pos_motor_stop_);
  swap(angle1_motor_start_, other->angle1_motor_start_);
  swap(angle1_motor_stop_, other->angle1_motor_stop_);
  swap(angle2_motor_start_, other->angle2_motor_start_);
  swap(angle2_motor_stop_, other->angle2_motor_stop_);
  swap(motor1speed_, other->motor1speed_);
  swap(motor2speed_, other->motor2speed_);
  swap(motor3speed_, other->motor3speed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Machine::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SeamModify::InitAsDefaultInstance() {
}
class SeamModify::_Internal {
 public:
};

SeamModify::SeamModify()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:frame.SeamModify)
}
SeamModify::SeamModify(const SeamModify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  seamtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_seamtype().empty()) {
    seamtype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.seamtype_);
  }
  option1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_option1().empty()) {
    option1_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.option1_);
  }
  ::memcpy(&main_, &from.main_,
    static_cast<size_t>(reinterpret_cast<char*>(&enabled_) -
    reinterpret_cast<char*>(&main_)) + sizeof(enabled_));
  // @@protoc_insertion_point(copy_constructor:frame.SeamModify)
}

void SeamModify::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SeamModify_Frame_2eproto.base);
  seamtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  option1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&main_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enabled_) -
      reinterpret_cast<char*>(&main_)) + sizeof(enabled_));
}

SeamModify::~SeamModify() {
  // @@protoc_insertion_point(destructor:frame.SeamModify)
  SharedDtor();
}

void SeamModify::SharedDtor() {
  seamtype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  option1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SeamModify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SeamModify& SeamModify::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SeamModify_Frame_2eproto.base);
  return *internal_default_instance();
}


void SeamModify::Clear() {
// @@protoc_insertion_point(message_clear_start:frame.SeamModify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  seamtype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  option1_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&main_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enabled_) -
      reinterpret_cast<char*>(&main_)) + sizeof(enabled_));
  _internal_metadata_.Clear();
}

const char* SeamModify::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 main = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          main_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rank = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string seamType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_seamtype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frame.SeamModify.seamType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double DEPARTLEN = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          departlen_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 midPoint = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          midpoint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 MIDDLESTART = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          middlestart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string option1 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_option1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frame.SeamModify.option1"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 autoFit = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          autofit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 tracing = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          tracing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double width = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double height = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 CORNERLEN = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          cornerlen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 CORNERANGLE = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          cornerangle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 enabled = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SeamModify::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frame.SeamModify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 main = 1;
  if (this->main() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_main(), target);
  }

  // int32 rank = 2;
  if (this->rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_rank(), target);
  }

  // string seamType = 3;
  if (this->seamtype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_seamtype().data(), static_cast<int>(this->_internal_seamtype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frame.SeamModify.seamType");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_seamtype(), target);
  }

  // double DEPARTLEN = 4;
  if (!(this->departlen() <= 0 && this->departlen() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_departlen(), target);
  }

  // int32 midPoint = 5;
  if (this->midpoint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_midpoint(), target);
  }

  // int32 MIDDLESTART = 6;
  if (this->middlestart() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_middlestart(), target);
  }

  // string option1 = 7;
  if (this->option1().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_option1().data(), static_cast<int>(this->_internal_option1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frame.SeamModify.option1");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_option1(), target);
  }

  // int32 autoFit = 8;
  if (this->autofit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_autofit(), target);
  }

  // int32 tracing = 9;
  if (this->tracing() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_tracing(), target);
  }

  // double width = 10;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_width(), target);
  }

  // double height = 11;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_height(), target);
  }

  // int32 CORNERLEN = 12;
  if (this->cornerlen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_cornerlen(), target);
  }

  // int32 CORNERANGLE = 13;
  if (this->cornerangle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_cornerangle(), target);
  }

  // int32 enabled = 14;
  if (this->enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frame.SeamModify)
  return target;
}

size_t SeamModify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frame.SeamModify)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string seamType = 3;
  if (this->seamtype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_seamtype());
  }

  // string option1 = 7;
  if (this->option1().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_option1());
  }

  // int32 main = 1;
  if (this->main() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_main());
  }

  // int32 rank = 2;
  if (this->rank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rank());
  }

  // double DEPARTLEN = 4;
  if (!(this->departlen() <= 0 && this->departlen() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 midPoint = 5;
  if (this->midpoint() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_midpoint());
  }

  // int32 MIDDLESTART = 6;
  if (this->middlestart() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_middlestart());
  }

  // int32 autoFit = 8;
  if (this->autofit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_autofit());
  }

  // int32 tracing = 9;
  if (this->tracing() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tracing());
  }

  // double width = 10;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    total_size += 1 + 8;
  }

  // double height = 11;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 CORNERLEN = 12;
  if (this->cornerlen() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cornerlen());
  }

  // int32 CORNERANGLE = 13;
  if (this->cornerangle() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cornerangle());
  }

  // int32 enabled = 14;
  if (this->enabled() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_enabled());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SeamModify::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frame.SeamModify)
  GOOGLE_DCHECK_NE(&from, this);
  const SeamModify* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SeamModify>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frame.SeamModify)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frame.SeamModify)
    MergeFrom(*source);
  }
}

void SeamModify::MergeFrom(const SeamModify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frame.SeamModify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.seamtype().size() > 0) {

    seamtype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.seamtype_);
  }
  if (from.option1().size() > 0) {

    option1_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.option1_);
  }
  if (from.main() != 0) {
    _internal_set_main(from._internal_main());
  }
  if (from.rank() != 0) {
    _internal_set_rank(from._internal_rank());
  }
  if (!(from.departlen() <= 0 && from.departlen() >= 0)) {
    _internal_set_departlen(from._internal_departlen());
  }
  if (from.midpoint() != 0) {
    _internal_set_midpoint(from._internal_midpoint());
  }
  if (from.middlestart() != 0) {
    _internal_set_middlestart(from._internal_middlestart());
  }
  if (from.autofit() != 0) {
    _internal_set_autofit(from._internal_autofit());
  }
  if (from.tracing() != 0) {
    _internal_set_tracing(from._internal_tracing());
  }
  if (!(from.width() <= 0 && from.width() >= 0)) {
    _internal_set_width(from._internal_width());
  }
  if (!(from.height() <= 0 && from.height() >= 0)) {
    _internal_set_height(from._internal_height());
  }
  if (from.cornerlen() != 0) {
    _internal_set_cornerlen(from._internal_cornerlen());
  }
  if (from.cornerangle() != 0) {
    _internal_set_cornerangle(from._internal_cornerangle());
  }
  if (from.enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
}

void SeamModify::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frame.SeamModify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeamModify::CopyFrom(const SeamModify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frame.SeamModify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeamModify::IsInitialized() const {
  return true;
}

void SeamModify::InternalSwap(SeamModify* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  seamtype_.Swap(&other->seamtype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  option1_.Swap(&other->option1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(main_, other->main_);
  swap(rank_, other->rank_);
  swap(departlen_, other->departlen_);
  swap(midpoint_, other->midpoint_);
  swap(middlestart_, other->middlestart_);
  swap(autofit_, other->autofit_);
  swap(tracing_, other->tracing_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(cornerlen_, other->cornerlen_);
  swap(cornerangle_, other->cornerangle_);
  swap(enabled_, other->enabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SeamModify::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SeamInfo::InitAsDefaultInstance() {
  ::frame::_SeamInfo_default_instance_._instance.get_mutable()->relate_ = const_cast< ::frame::SeamRelate*>(
      ::frame::SeamRelate::internal_default_instance());
  ::frame::_SeamInfo_default_instance_._instance.get_mutable()->weldinfo_ = const_cast< ::frame::SeamWeldInfo*>(
      ::frame::SeamWeldInfo::internal_default_instance());
  ::frame::_SeamInfo_default_instance_._instance.get_mutable()->weldpara_ = const_cast< ::frame::WeldParament*>(
      ::frame::WeldParament::internal_default_instance());
  ::frame::_SeamInfo_default_instance_._instance.get_mutable()->machine_ = const_cast< ::frame::Machine*>(
      ::frame::Machine::internal_default_instance());
  ::frame::_SeamInfo_default_instance_._instance.get_mutable()->modify_ = const_cast< ::frame::SeamModify*>(
      ::frame::SeamModify::internal_default_instance());
}
class SeamInfo::_Internal {
 public:
  static const ::frame::SeamRelate& relate(const SeamInfo* msg);
  static const ::frame::SeamWeldInfo& weldinfo(const SeamInfo* msg);
  static const ::frame::WeldParament& weldpara(const SeamInfo* msg);
  static const ::frame::Machine& machine(const SeamInfo* msg);
  static const ::frame::SeamModify& modify(const SeamInfo* msg);
};

const ::frame::SeamRelate&
SeamInfo::_Internal::relate(const SeamInfo* msg) {
  return *msg->relate_;
}
const ::frame::SeamWeldInfo&
SeamInfo::_Internal::weldinfo(const SeamInfo* msg) {
  return *msg->weldinfo_;
}
const ::frame::WeldParament&
SeamInfo::_Internal::weldpara(const SeamInfo* msg) {
  return *msg->weldpara_;
}
const ::frame::Machine&
SeamInfo::_Internal::machine(const SeamInfo* msg) {
  return *msg->machine_;
}
const ::frame::SeamModify&
SeamInfo::_Internal::modify(const SeamInfo* msg) {
  return *msg->modify_;
}
SeamInfo::SeamInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:frame.SeamInfo)
}
SeamInfo::SeamInfo(const SeamInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      framepos_(from.framepos_),
      scanepos_(from.scanepos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  seamname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_seamname().empty()) {
    seamname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.seamname_);
  }
  cadid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cadid().empty()) {
    cadid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cadid_);
  }
  if (from._internal_has_relate()) {
    relate_ = new ::frame::SeamRelate(*from.relate_);
  } else {
    relate_ = nullptr;
  }
  if (from._internal_has_weldinfo()) {
    weldinfo_ = new ::frame::SeamWeldInfo(*from.weldinfo_);
  } else {
    weldinfo_ = nullptr;
  }
  if (from._internal_has_weldpara()) {
    weldpara_ = new ::frame::WeldParament(*from.weldpara_);
  } else {
    weldpara_ = nullptr;
  }
  if (from._internal_has_machine()) {
    machine_ = new ::frame::Machine(*from.machine_);
  } else {
    machine_ = nullptr;
  }
  if (from._internal_has_modify()) {
    modify_ = new ::frame::SeamModify(*from.modify_);
  } else {
    modify_ = nullptr;
  }
  ::memcpy(&seamid_, &from.seamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&seamindex_) -
    reinterpret_cast<char*>(&seamid_)) + sizeof(seamindex_));
  // @@protoc_insertion_point(copy_constructor:frame.SeamInfo)
}

void SeamInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SeamInfo_Frame_2eproto.base);
  seamname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cadid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&relate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seamindex_) -
      reinterpret_cast<char*>(&relate_)) + sizeof(seamindex_));
}

SeamInfo::~SeamInfo() {
  // @@protoc_insertion_point(destructor:frame.SeamInfo)
  SharedDtor();
}

void SeamInfo::SharedDtor() {
  seamname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cadid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete relate_;
  if (this != internal_default_instance()) delete weldinfo_;
  if (this != internal_default_instance()) delete weldpara_;
  if (this != internal_default_instance()) delete machine_;
  if (this != internal_default_instance()) delete modify_;
}

void SeamInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SeamInfo& SeamInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SeamInfo_Frame_2eproto.base);
  return *internal_default_instance();
}


void SeamInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:frame.SeamInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  framepos_.Clear();
  scanepos_.Clear();
  seamname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cadid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && relate_ != nullptr) {
    delete relate_;
  }
  relate_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && weldinfo_ != nullptr) {
    delete weldinfo_;
  }
  weldinfo_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && weldpara_ != nullptr) {
    delete weldpara_;
  }
  weldpara_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && machine_ != nullptr) {
    delete machine_;
  }
  machine_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && modify_ != nullptr) {
    delete modify_;
  }
  modify_ = nullptr;
  ::memset(&seamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seamindex_) -
      reinterpret_cast<char*>(&seamid_)) + sizeof(seamindex_));
  _internal_metadata_.Clear();
}

const char* SeamInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .frame.AFramePos framePos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_framepos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .frame.AScanePos scanePos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_scanepos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .frame.SeamRelate relate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_relate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .frame.SeamWeldInfo weldinfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_weldinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .frame.WeldParament weldPara = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_weldpara(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string seamName = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_seamname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frame.SeamInfo.seamName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 seamID = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          seamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 orderIndex = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          orderindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 seamIndex = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          seamindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cadid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_cadid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frame.SeamInfo.cadid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .frame.Machine machine = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_machine(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .frame.SeamModify modify = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_modify(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SeamInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frame.SeamInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .frame.AFramePos framePos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_framepos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_framepos(i), target, stream);
  }

  // repeated .frame.AScanePos scanePos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_scanepos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_scanepos(i), target, stream);
  }

  // .frame.SeamRelate relate = 3;
  if (this->has_relate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::relate(this), target, stream);
  }

  // .frame.SeamWeldInfo weldinfo = 4;
  if (this->has_weldinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::weldinfo(this), target, stream);
  }

  // .frame.WeldParament weldPara = 5;
  if (this->has_weldpara()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::weldpara(this), target, stream);
  }

  // string seamName = 6;
  if (this->seamname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_seamname().data(), static_cast<int>(this->_internal_seamname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frame.SeamInfo.seamName");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_seamname(), target);
  }

  // int32 seamID = 7;
  if (this->seamid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_seamid(), target);
  }

  // int32 orderIndex = 8;
  if (this->orderindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_orderindex(), target);
  }

  // int32 seamIndex = 9;
  if (this->seamindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_seamindex(), target);
  }

  // string cadid = 10;
  if (this->cadid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cadid().data(), static_cast<int>(this->_internal_cadid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frame.SeamInfo.cadid");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_cadid(), target);
  }

  // .frame.Machine machine = 11;
  if (this->has_machine()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::machine(this), target, stream);
  }

  // .frame.SeamModify modify = 12;
  if (this->has_modify()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::modify(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frame.SeamInfo)
  return target;
}

size_t SeamInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frame.SeamInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .frame.AFramePos framePos = 1;
  total_size += 1UL * this->_internal_framepos_size();
  for (const auto& msg : this->framepos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .frame.AScanePos scanePos = 2;
  total_size += 1UL * this->_internal_scanepos_size();
  for (const auto& msg : this->scanepos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string seamName = 6;
  if (this->seamname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_seamname());
  }

  // string cadid = 10;
  if (this->cadid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cadid());
  }

  // .frame.SeamRelate relate = 3;
  if (this->has_relate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *relate_);
  }

  // .frame.SeamWeldInfo weldinfo = 4;
  if (this->has_weldinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *weldinfo_);
  }

  // .frame.WeldParament weldPara = 5;
  if (this->has_weldpara()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *weldpara_);
  }

  // .frame.Machine machine = 11;
  if (this->has_machine()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *machine_);
  }

  // .frame.SeamModify modify = 12;
  if (this->has_modify()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *modify_);
  }

  // int32 seamID = 7;
  if (this->seamid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_seamid());
  }

  // int32 orderIndex = 8;
  if (this->orderindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_orderindex());
  }

  // int32 seamIndex = 9;
  if (this->seamindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_seamindex());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SeamInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frame.SeamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SeamInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SeamInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frame.SeamInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frame.SeamInfo)
    MergeFrom(*source);
  }
}

void SeamInfo::MergeFrom(const SeamInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frame.SeamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  framepos_.MergeFrom(from.framepos_);
  scanepos_.MergeFrom(from.scanepos_);
  if (from.seamname().size() > 0) {

    seamname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.seamname_);
  }
  if (from.cadid().size() > 0) {

    cadid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cadid_);
  }
  if (from.has_relate()) {
    _internal_mutable_relate()->::frame::SeamRelate::MergeFrom(from._internal_relate());
  }
  if (from.has_weldinfo()) {
    _internal_mutable_weldinfo()->::frame::SeamWeldInfo::MergeFrom(from._internal_weldinfo());
  }
  if (from.has_weldpara()) {
    _internal_mutable_weldpara()->::frame::WeldParament::MergeFrom(from._internal_weldpara());
  }
  if (from.has_machine()) {
    _internal_mutable_machine()->::frame::Machine::MergeFrom(from._internal_machine());
  }
  if (from.has_modify()) {
    _internal_mutable_modify()->::frame::SeamModify::MergeFrom(from._internal_modify());
  }
  if (from.seamid() != 0) {
    _internal_set_seamid(from._internal_seamid());
  }
  if (from.orderindex() != 0) {
    _internal_set_orderindex(from._internal_orderindex());
  }
  if (from.seamindex() != 0) {
    _internal_set_seamindex(from._internal_seamindex());
  }
}

void SeamInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frame.SeamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeamInfo::CopyFrom(const SeamInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frame.SeamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeamInfo::IsInitialized() const {
  return true;
}

void SeamInfo::InternalSwap(SeamInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  framepos_.InternalSwap(&other->framepos_);
  scanepos_.InternalSwap(&other->scanepos_);
  seamname_.Swap(&other->seamname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cadid_.Swap(&other->cadid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(relate_, other->relate_);
  swap(weldinfo_, other->weldinfo_);
  swap(weldpara_, other->weldpara_);
  swap(machine_, other->machine_);
  swap(modify_, other->modify_);
  swap(seamid_, other->seamid_);
  swap(orderindex_, other->orderindex_);
  swap(seamindex_, other->seamindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SeamInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Frame::InitAsDefaultInstance() {
}
class Frame::_Internal {
 public:
};

Frame::Frame()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:frame.Frame)
}
Frame::Frame(const Frame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      seams_(from.seams_),
      cad_(from.cad_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_date().empty()) {
    date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.date_);
  }
  // @@protoc_insertion_point(copy_constructor:frame.Frame)
}

void Frame::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Frame_Frame_2eproto.base);
  date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Frame::~Frame() {
  // @@protoc_insertion_point(destructor:frame.Frame)
  SharedDtor();
}

void Frame::SharedDtor() {
  date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Frame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Frame& Frame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Frame_Frame_2eproto.base);
  return *internal_default_instance();
}


void Frame::Clear() {
// @@protoc_insertion_point(message_clear_start:frame.Frame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  seams_.Clear();
  cad_.Clear();
  date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Frame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .frame.SeamInfo seams = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_seams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .frame.Cad cad = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cad(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string date = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "frame.Frame.date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Frame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frame.Frame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .frame.SeamInfo seams = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_seams_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_seams(i), target, stream);
  }

  // repeated .frame.Cad cad = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cad_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_cad(i), target, stream);
  }

  // string date = 3;
  if (this->date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_date().data(), static_cast<int>(this->_internal_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "frame.Frame.date");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_date(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frame.Frame)
  return target;
}

size_t Frame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frame.Frame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .frame.SeamInfo seams = 1;
  total_size += 1UL * this->_internal_seams_size();
  for (const auto& msg : this->seams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .frame.Cad cad = 2;
  total_size += 1UL * this->_internal_cad_size();
  for (const auto& msg : this->cad_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string date = 3;
  if (this->date().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_date());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Frame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frame.Frame)
  GOOGLE_DCHECK_NE(&from, this);
  const Frame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Frame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frame.Frame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frame.Frame)
    MergeFrom(*source);
  }
}

void Frame::MergeFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frame.Frame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  seams_.MergeFrom(from.seams_);
  cad_.MergeFrom(from.cad_);
  if (from.date().size() > 0) {

    date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.date_);
  }
}

void Frame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frame.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Frame::CopyFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frame.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Frame::IsInitialized() const {
  return true;
}

void Frame::InternalSwap(Frame* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  seams_.InternalSwap(&other->seams_);
  cad_.InternalSwap(&other->cad_);
  date_.Swap(&other->date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Frame::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace frame
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::frame::Pos* Arena::CreateMaybeMessage< ::frame::Pos >(Arena* arena) {
  return Arena::CreateInternal< ::frame::Pos >(arena);
}
template<> PROTOBUF_NOINLINE ::frame::AScanePos* Arena::CreateMaybeMessage< ::frame::AScanePos >(Arena* arena) {
  return Arena::CreateInternal< ::frame::AScanePos >(arena);
}
template<> PROTOBUF_NOINLINE ::frame::AFramePos* Arena::CreateMaybeMessage< ::frame::AFramePos >(Arena* arena) {
  return Arena::CreateInternal< ::frame::AFramePos >(arena);
}
template<> PROTOBUF_NOINLINE ::frame::SeamRelate* Arena::CreateMaybeMessage< ::frame::SeamRelate >(Arena* arena) {
  return Arena::CreateInternal< ::frame::SeamRelate >(arena);
}
template<> PROTOBUF_NOINLINE ::frame::SeamWeldInfo* Arena::CreateMaybeMessage< ::frame::SeamWeldInfo >(Arena* arena) {
  return Arena::CreateInternal< ::frame::SeamWeldInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::frame::WeldParament* Arena::CreateMaybeMessage< ::frame::WeldParament >(Arena* arena) {
  return Arena::CreateInternal< ::frame::WeldParament >(arena);
}
template<> PROTOBUF_NOINLINE ::frame::Cad* Arena::CreateMaybeMessage< ::frame::Cad >(Arena* arena) {
  return Arena::CreateInternal< ::frame::Cad >(arena);
}
template<> PROTOBUF_NOINLINE ::frame::Machine* Arena::CreateMaybeMessage< ::frame::Machine >(Arena* arena) {
  return Arena::CreateInternal< ::frame::Machine >(arena);
}
template<> PROTOBUF_NOINLINE ::frame::SeamModify* Arena::CreateMaybeMessage< ::frame::SeamModify >(Arena* arena) {
  return Arena::CreateInternal< ::frame::SeamModify >(arena);
}
template<> PROTOBUF_NOINLINE ::frame::SeamInfo* Arena::CreateMaybeMessage< ::frame::SeamInfo >(Arena* arena) {
  return Arena::CreateInternal< ::frame::SeamInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::frame::Frame* Arena::CreateMaybeMessage< ::frame::Frame >(Arena* arena) {
  return Arena::CreateInternal< ::frame::Frame >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
